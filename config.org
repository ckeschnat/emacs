#+SETUPFILE: themes/theme-readtheorg-local.setup
#+OPTIONS: html-postamble:nil num:nil
#+FILETAGS: emacs
#+TITLE: Emacs config
* Introduction

Headings tagged "CANCELLED" will not be tangled.

Install fonts from fonts folder.
* Startup
#+BEGIN_SRC emacs-lisp
  ;;(setq debug-on-error t)
  ;; Use a hook so the message doesn't get clobbered by other messages.
  (add-hook 'emacs-startup-hook
        (lambda ()
          (message "Emacs ready in %s with %d garbage collections."
               (format "%.2f seconds"
                   (float-time
                (time-subtract after-init-time before-init-time)))
               gcs-done)))

#+END_SRC
* Gc and startup
https://www.reddit.com/r/emacs/comments/55ork0/is_emacs_251_noticeably_slower_than_245_on_windows/d8cmm7v/

http://bling.github.io/blog/2016/01/18/why-are-you-changing-gc-cons-threshold/

#+BEGIN_SRC emacs-lisp
  (defun my-minibuffer-setup-hook ()
    (setq gc-cons-threshold most-positive-fixnum))

  (defun my-minibuffer-exit-hook ()
    (setq gc-cons-threshold (* 63 1024 1024)))

  (add-hook 'minibuffer-setup-hook #'my-minibuffer-setup-hook)
  (add-hook 'minibuffer-exit-hook #'my-minibuffer-exit-hook)

  (setq gc-cons-threshold most-positive-fixnum)

  (add-hook 'after-init-hook #'(lambda ()
                 ;; restore after startup
                (setq gc-cons-threshold (* 63 1024 1024))))

  (setq gc-cons-percentage 0.5)
  (run-with-idle-timer 5 t #'garbage-collect)
  (setq garbage-collection-messages t)
#+END_SRC

https://ambrevar.xyz/emacs2/
#+BEGIN_SRC emacs-lisp
  ;;; Temporarily disable the file name handler.
  (setq default-file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)
  (defun ambrevar/reset-file-name-handler-alist ()
    (setq file-name-handler-alist
      (append default-file-name-handler-alist
      file-name-handler-alist))
    (cl-delete-duplicates file-name-handler-alist :test 'equal))
  (add-hook 'after-init-hook #'ambrevar/reset-file-name-handler-alist)
#+END_SRC
* OS and Hostname
Functions to determine which machine I'm on

https://karl-voit.at/2017/02/11/my-system-is-foobar/

#+BEGIN_SRC emacs-lisp
  ;; Check if system is Darwin/macOS
  (defun my-system-type-is-darwin ()
    "Return true if system is darwin-based (Mac OS X)"
    (string-equal system-type "darwin"))

  ;; Check if system is Microsoft Windows
  (defun my-system-type-is-windows ()
    "Return true if system is Windows-based (at least up to Win7)"
    (string-equal system-type "windows-nt"))

  ;; Check if system is GNU/Linux
  (defun my-system-type-is-gnu ()
    "Return true if system is GNU/Linux-based"
    (string-equal system-type "gnu/linux"))

  ;; Check if the hostname is mynotebook
  (defun my-system-is-mypc ()
    "Return true if the system we are running on is mynotebook"
    (string-equal (system-name) "BEZEL"))

  ;; Check if the hostname is mydesktop
  (defun my-system-is-myoldworkpc ()
    "Return true if the system we are running on is mydesktop"
    (string-equal (system-name) "P1WN0259"))

  ;; Check if the hostname is mydesktop
  (defun my-system-is-myworkpc ()
    "Return true if the system we are running on is mydesktop"
    (string-equal (system-name) "P1WN0669"))
#+END_SRC
* Packages
#+BEGIN_SRC emacs-lisp
  ;; Package configs
  (require 'package)
  (setq package-enable-at-startup nil)
  (setq package-archives '(("org"   . "http://orgmode.org/elpa/")
               ("gnu"   . "http://elpa.gnu.org/packages/")
               ("melpa" . "https://melpa.org/packages/")))
  (package-initialize)

  ;; Bootstrap `use-package`
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC
* use-package
#+BEGIN_SRC emacs-lisp
  (require 'use-package)
  (setq use-package-always-ensure t)
  (setq use-package-always-defer t)
#+END_SRC
* Profiling
#+BEGIN_SRC emacs-lisp
  (use-package esup)
#+END_SRC
* UI
https://huytd.github.io/emacs-from-scratch.html

https://superuser.com/questions/313398/how-to-prevent-the-symbols-function-definition-is-void-error-when-running-em
*** Misc
#+BEGIN_SRC emacs-lisp
  ;; Minimal UI
  (when (display-graphic-p)
    (progn
      (scroll-bar-mode -1)
      (tool-bar-mode   -1)))
  (tooltip-mode    -1)
  (menu-bar-mode   -1)
  (setq inhibit-splash-screen t)
#+END_SRC
*** Font
Set Symbola as fallback font to display unicode characters.
#+BEGIN_SRC emacs-lisp
  (set-fontset-font "fontset-default" nil
    (font-spec :size 20 :name "Symbola"))

  (add-to-list 'default-frame-alist '(font . "Liberation Mono"))
  (add-to-list 'initial-frame-alist '(fullscreen . maximized))
  (add-to-list 'default-frame-alist '(fullscreen . fullheight))
#+END_SRC
*** Theme
#+BEGIN_SRC emacs-lisp
  ;; Theme
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
    (setq zenburn-override-colors-alist '(
                      ("zenburn-bg-05" . "#131818")
                      ("zenburn-bg-1" . "#6A714A")
                      ))
  (load-theme 'zenburn t)

#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
  (add-to-list 'load-path "~/.emacs.d/elpa/doom-themes-20181101.218/")
  (use-package doom-themes
    :defer nil
    :config
    (load-theme 'doom-one t))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package distinguished-theme
      :defer nil
      :config
      (load-theme 'distinguished t))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package zerodark-theme
      :defer nil
      :config
      (load-theme 'zerodark t)
      (zerodark-setup-modeline-format))
#+END_SRC

https://github.com/jasonm23/emacs-select-themes
#+BEGIN_SRC emacs-lisp
  (defun select-themes (theme)
    "Interactively select a THEME, from the available custom themes.
  You can also select '*Emacs default*' to return to Emacs default theme.
  Note: multiple enabled themes cause Emacs to slow down, so we
  disable them before selecting the new theme."
    (interactive (list (completing-read "Select theme: "
                  (sort (custom-available-themes) 'string<)
                  nil nil nil nil
                  "*Emacs default*")))
    (mapc 'disable-theme custom-enabled-themes)
    (unless (string= "*Emacs default*" theme)
      (load-theme (intern-soft theme))))

  (provide 'select-themes)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
  (use-package doom-modeline
    :defer t
    :hook (after-init . doom-modeline-init)
    :config
      (setq doom-modeline-height 10))
#+END_SRC
**** CANCELLED Disable git vc info                             :CANCELLED:
CLOSED: [2019-01-20 Sun 11:17]
:LOGBOOK:
- State "CANCELLED"  from              [2019-01-20 Sun 11:17] \\
  This disabled git completely. Not sure I want this.
:END:
See https://github.com/seagle0128/doom-modeline and https://magit.vc/manual/magit/The-mode_002dline-information-isn_0027t-always-up_002dto_002ddate.html
#+BEGIN_SRC emacs-lisp
  (setq vc-handled-backends (delq 'Git vc-handled-backends))
#+END_SRC
* General
Key bindings.
** TODO move some of these somewhere else
#+BEGIN_SRC emacs-lisp
    ;; Custom keybinding
    (use-package general
      :defer nil
      :config
      (general-evil-setup t)

      (general-define-key
        :prefix "C-c"
        ;; bind "C-c a" to 'org-agenda
        "a" 'org-agenda
        "b" 'counsel-bookmark
        "c" 'org-capture)

      (general-define-key
        :states '(normal visual insert emacs motion)
        :prefix "SPC"
        :non-normal-prefix "M-SPC"
        "" nil
        "TAB" '(spacemacs/alternate-buffer :which-key "previous buffer")
        ;; Window
        "w"  '(:ignore t :which-key "Windows")
        "wl"  '(windmove-right :which-key "move right")
        "wh"  '(windmove-left :which-key "move left")
        "wk"  '(windmove-up :which-key "move up")
        "wj"  '(windmove-down :which-key "move bottom")
        "w/"  '(split-window-right :which-key "split right")
        "w-"  '(split-window-below :which-key "split bottom")
        "wd"  '(delete-window :which-key "delete window")
        ;; Files
        "f"  '(:ignore t :which-key "Files")
        ;; Buffers
        "b"  '(:ignore t :which-key "Buffers")
        "bd"  '(kill-this-buffer :which-key "delete buffer")
        ;; Org
        "o"  '(:ignore t :which-key "Org")
        "oc" '(org-capture :which-key "org-capture")
        "oi" '(org-clock-in :which-key "org-clock-in")
        "oo" '(org-clock-out :which-key "org-clock-out")
        "os" '(ck/org-screenshot :which-key "org-screenshot")
        ;; Search
        "s"  '(:ignore t :which-key "Search"))

      (general-define-key
        "C-x j" 'kill-this-buffer
        "M-o" 'other-window
        "C-x k" 'kill-buffer-and-window))

     (defun config-visit ()
      (interactive)
      (find-file "~/.emacs.d/config.org"))

      (general-define-key
        :states '(normal visual insert emacs)
        "C-c e" 'config-visit)

     (defun ledger-visit ()
      (interactive)
      (find-file (concat my-org-dir "ledger/ledger.org")))

      (general-define-key
        :states '(normal visual insert emacs)
        "C-c l" 'ledger-visit)
#+END_SRC

* Misc
A lot of this is from https://github.com/hrs/sensible-defaults.el/blob/master/sensible-defaults.el
*** Cleanup whitespace
#+BEGIN_SRC emacs-lisp
  (setq show-trailing-whitespace t)
  (add-hook 'before-save-hook 'whitespace-cleanup)
#+END_SRC
*** Follow symlinks
#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
#+END_SRC
*** Scipts auto executable
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
#+END_SRC
*** CamelCase-Movement
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'subword-mode)
#+END_SRC
*** Final newline
If you save a file that doesn't end with a newline,
automatically append one.
#+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
#+END_SRC
*** Confirm kill emacs
Ask if you're sure that you want to close Emacs.
#+BEGIN_SRC emacs-lisp
  (setq confirm-kill-emacs 'y-or-n-p)
#+END_SRC
*** Visible bell
When you perform a problematic operation, flash the screen
instead of ringing the terminal bell.
#+BEGIN_SRC emacs-lisp
  (setq visible-bell t)
#+END_SRC
*** Create directories
When saving a file in a directory that doesn't exist, offer
to (recursively) create the file's parent directories.
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook
          (lambda ()
        (when buffer-file-name
          (let ((dir (file-name-directory buffer-file-name)))
            (when (and (not (file-exists-p dir))
                   (y-or-n-p (format "Directory %s does not exist. Create it?" dir)))
  (make-directory dir t))))))
#+END_SRC
*** Auto reload
When something changes a file, automatically refresh the
buffer containing that file so they can't get out of sync.
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
#+END_SRC
*** Paths
#+BEGIN_SRC emacs-lisp
  (setenv "PATH" (concat "C:\\msys64\\usr\\bin;" "C:\\msys64\\mingw64\\bin;" "C:\\texlive\\2018\\bin\\win32;" "w:\\handmade\\misc;" (getenv "PATH")))
#+END_SRC
*** Encoding
See [[https://www.masteringemacs.org/article/working-coding-systems-unicode-emacs][masteringemacs]] and [[https://zhangda.wordpress.com/2016/02/15/configurations-for-beautifying-emacs-org-mode/]]
#+BEGIN_SRC emacs-lisp
  ;; disable CJK coding/encoding (Chinese/Japanese/Korean characters)
  (setq utf-translate-cjk-mode nil)

  (set-language-environment 'utf-8)
  (setq locale-coding-system 'utf-8)

  ;; set the default encoding system
  (prefer-coding-system 'utf-8)
  (setq default-file-name-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  ;; backwards compatibility as default-buffer-file-coding-system
  ;; is deprecated in 23.2.
  (if (boundp buffer-file-coding-system)
      (setq buffer-file-coding-system 'utf-8)
    (setq default-buffer-file-coding-system 'utf-8))

  ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
#+END_SRC
*** Customize
#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file 'noerror)
#+END_SRC
*** Help
#+BEGIN_SRC emacs-lisp
  (setq help-window-select t)
#+END_SRC
*** Parens
#+BEGIN_SRC emacs-lisp
  ;; Show matching parens
  (setq show-paren-delay 0)
  (show-paren-mode 1)
#+END_SRC
*** Change "yes or no" to "y or n"
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** Backup, autosaves and lock files
#+BEGIN_SRC emacs-lisp
  ;; Set backup directory
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))

  (setq delete-old-versions -1)
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

  ;; No lock files
  (setq create-lockfiles nil)
#+END_SRC
*** History
#+BEGIN_SRC emacs-lisp
  (setq savehist-file "~/.emacs.d/savehist")
  (savehist-mode 1)
  (setq history-length t)
  (setq history-delete-duplicates t)
  (setq savehist-save-minibuffer-history 1)
  (setq savehist-additional-variables
    '(kill-ring
      search-ring
      regexp-search-ring))
#+END_SRC
*** Time in modeline
#+BEGIN_SRC emacs-lisp
  (display-time-mode 1)
#+END_SRC
*** Sentences end with a single space
#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
#+END_SRC
*** Winner
#+BEGIN_SRC emacs-lisp
  (winner-mode 1)
#+END_SRC
*** persistent undo
#+BEGIN_SRC emacs-lisp
  (setq undo-tree-auto-save-history t)
  (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
#+END_SRC
*** Undo tree mode - visualize your undos and branches

People often struggle with the Emacs undo model, where there's really no concept of "redo" - you simply undo the undo.
#
This lets you use =C-x u= (=undo-tree-visualize=) to visually walk through the changes you've made, undo back to a certain point (or redo), and go down different branches.

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :diminish undo-tree-mode
    :config
    (progn
      (global-undo-tree-mode)
      (setq undo-tree-visualizer-timestamps t)
      (setq undo-tree-visualizer-diff t))

    (general-define-key
      :states '(normal visual insert emacs)
      :prefix "SPC"
      :non-normal-prefix "M-SPC"
      "u"  '(:ignore t :which-key "Undo")
      "uv" '(undo-tree-visualize :which-key "Visualize")))
#+END_SRC
*** center after search
I had this on 0 to center after searches.
But then scrolling also recenters point.
#+BEGIN_SRC emacs-lisp
  ;; center after search
  (setq scroll-conservatively 100)
#+END_SRC
*** Highlight current line
#+BEGIN_SRC emacs-lisp
  (when window-system
    (global-hl-line-mode)
    (set-face-background 'hl-line "#333333"))
#+END_SRC
*** Tabs
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4 indent-tabs-mode nil)
#+END_SRC
*** Always load newest
https://ambrevar.xyz/emacs2/
#+BEGIN_SRC emacs-lisp
  (setq load-prefer-newer t)
#+END_SRC
*** narrow-or-widen-dwim
http://endlessparentheses.com/emacs-narrow-or-widen-dwim.html
#+BEGIN_SRC emacs-lisp
  (defun narrow-or-widen-dwim (p)
    "Widen if buffer is narrowed, narrow-dwim otherwise.
  Dwim means: region, org-src-block, org-subtree, or
  defun, whichever applies first. Narrowing to
  org-src-block actually calls `org-edit-src-code'.

  With prefix P, don't widen, just narrow even if buffer
  is already narrowed."
    (interactive "P")
    (declare (interactive-only))
    (cond ((and (buffer-narrowed-p) (not p)) (widen))
      ((region-active-p)
       (narrow-to-region (region-beginning)
                 (region-end)))
      ((derived-mode-p 'org-mode)
       ;; `org-edit-src-code' is not a real narrowing
       ;; command. Remove this first conditional if
       ;; you don't want it.
       (cond ((ignore-errors (org-edit-src-code) t)
          (delete-other-windows))
         ((ignore-errors (org-narrow-to-block) t))
         (t (org-narrow-to-subtree))))
      ((derived-mode-p 'latex-mode)
       (LaTeX-narrow-to-environment))
      (t (narrow-to-defun))))


  (general-define-key
    :prefix "C-h"
    "t" 'narrow-or-widen-dwim)

  (eval-after-load 'org-src
    '(define-key org-src-mode-map
       "\C-x\C-s" #'org-edit-src-exit))
#+END_SRC
*** recentf

#+BEGIN_SRC emacs-lisp
  (setq recentf-max-saved-items 200
        recentf-max-menu-items 15)
#+END_SRC
* Try
#+BEGIN_SRC emacs-lisp
  (use-package try
    :defer nil)
#+END_SRC
* Highlight TODO etc.

#+BEGIN_SRC emacs-lisp
  ;;; hl-todo.el --- highlight TODO and similar keywords  -*- lexical-binding: t -*-

  ;; Copyright (C) 2013-2019  Jonas Bernoulli

  ;; Author: Jonas Bernoulli <jonas@bernoul.li>
  ;; Homepage: https://github.com/tarsius/hl-todo
  ;; Keywords: convenience

  ;; This file is not part of GNU Emacs.

  ;; This file is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation; either version 3, or (at your option)
  ;; any later version.

  ;; This file is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; For a full copy of the GNU General Public License
  ;; see <http://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Highlight TODO and similar keywords in comments and strings.

  ;; You can either turn on `hl-todo-mode' in individual buffers or use
  ;; the the global variant `global-hl-todo-mode'.  Note that the option
  ;; `hl-todo-activate-in-modes' controls in what buffers the local mode
  ;; will be activated if you do the latter.  By default it will only be
  ;; activated in buffers whose major-mode derives from `prog-mode'.

  ;; This package also provides commands for moving to the next or
  ;; previous keyword and to invoke `occur' with a regexp that matches
  ;; all known keywords.  If you want to use these commands, then you
  ;; should bind them in `hl-todo-mode-map', e.g.:
  ;;
  ;;   (define-key hl-todo-mode-map (kbd "C-c p") 'hl-todo-previous)
  ;;   (define-key hl-todo-mode-map (kbd "C-c n") 'hl-todo-next)
  ;;   (define-key hl-todo-mode-map (kbd "C-c o") 'hl-todo-occur)

  ;; See [[https://www.emacswiki.org/emacs/FixmeMode][this list]] on the Emacswiki for other packages that implement
  ;; the same basic features, but which might also provide additional
  ;; features that you might like, but which I don't deem necessary.

  ;;; Code:

  (defgroup hl-todo nil
    "Highlight TODO and similar keywords in comments and strings."
    :group 'font-lock-extra-types)

  (defface hl-todo
    '((t (:bold t :foreground "#cc9393")))
    "Base face used to highlight TODO and similar keywords.
  The faces used to highlight certain keywords are, by default,
  created by inheriting this face and using the appropriate
  color specified using the option `hl-todo-keyword-faces' as
  foreground color."
    :group 'hl-todo)

  (defcustom hl-todo-activate-in-modes '(prog-mode text-mode)
    "Major-modes in which `hl-todo-mode' should be activated.

  This is used by `global-hl-todo-mode', which activates
  `hl-todo-mode' in all buffers whose major-mode derived from one
  of the modes listed here.

  Even though `org-mode' indirectly derives from `text-mode' this
  mode is never activated in `org-mode' buffers because that mode
  provides its own TODO keyword handling."
    :package-version '(hl-todo . "2.1.0")
    :group 'hl-todo
    :type '(repeat function))

  (defcustom hl-todo-text-modes '(text-mode)
    "Major-modes that are considered text-modes.

  In buffers whose major-mode derives from one of the modes listed
  here TODO keywords are always highlighted even if they are not
  located inside a string."
    :package-version '(hl-todo . "2.1.0")
    :group 'hl-todo
    :type '(repeat function))

  (defcustom hl-todo-keyword-faces
    '(("HOLD" . "#d0bf8f")
      ("TODO" . "#cc9393")
      ("NEXT" . "#dca3a3")
      ("THEM" . "#dc8cc3")
      ("PROG" . "#7cb8bb")
      ("OKAY" . "#7cb8bb")
      ("DONT" . "#5f7f5f")
      ("FAIL" . "#8c5353")
      ("DONE" . "#afd8af")
      ("NOTE"   . "#d0bf8f")
      ("KLUDGE" . "#d0bf8f")
      ("HACK"   . "#d0bf8f")
      ("TEMP"   . "#d0bf8f")
      ("FIXME"  . "#cc9393")
      ("XXX"    . "#cc9393")
      ("XXXX"   . "#cc9393")
      ("???"    . "#cc9393"))
    "Faces used to highlight specific TODO keywords."
    :package-version '(hl-todo . "2.0.0")
    :group 'hl-todo
    :type '(repeat (cons (string :tag "Keyword")
             (choice :tag "Face   "
                 (string :tag "Color")
                 (sexp :tag "Face")))))

  (defcustom hl-todo-highlight-punctuation ""
    "String of characters to highlight after keywords.

  Each of the characters appearing in this string is highlighted
  using the same face as the preceeding keyword when it directly
  follows the keyword.

  Characters whose syntax class is `w' (which means word),
  including alphanumeric characters, cannot be used here."
    :package-version '(hl-todo . "2.0.0")
    :group 'hl-todo
    :type 'string)

  (defvar-local hl-todo--regexp nil)
  (defvar-local hl-todo--keywords nil)

  (defun hl-todo--setup ()
    (setq hl-todo--regexp
      (concat "\\(\\<"
          (regexp-opt (mapcar #'car hl-todo-keyword-faces) t)
          "\\>"
          (and (not (equal hl-todo-highlight-punctuation ""))
               (concat "[" hl-todo-highlight-punctuation "]*"))
          "\\)"))
    (setq hl-todo--keywords
      `(((lambda (bound) (hl-todo--search nil bound))
         (1 (hl-todo--get-face) t t))))
    (font-lock-add-keywords nil hl-todo--keywords t))

  (defvar hl-todo--syntax-table (copy-syntax-table text-mode-syntax-table))

  (defun hl-todo--search (&optional regexp bound backward)
    (unless regexp
      (setq regexp hl-todo--regexp))
    (and (let ((case-fold-search nil))
       (with-syntax-table hl-todo--syntax-table
         (funcall (if backward #'re-search-backward #'re-search-forward)
              regexp bound t)))
     (or (apply #'derived-mode-p hl-todo-text-modes)
         (hl-todo--inside-comment-or-string-p)
         (and (or (not bound)
              (funcall (if backward #'< #'>) bound (point)))
          (hl-todo--search regexp bound backward)))))

  (defun hl-todo--inside-comment-or-string-p ()
    (nth 8 (syntax-ppss)))

  (defun hl-todo--get-face ()
    (let ((face (cdr (assoc (match-string 2) hl-todo-keyword-faces))))
      (if (stringp face)
      (list :inherit 'hl-todo :foreground face)
    face)))

  (defvar hl-todo-mode-map (make-sparse-keymap)
    "Keymap for `hl-todo-mode'.")

  ;;;###autoload
  (define-minor-mode hl-todo-mode
    "Highlight TODO and similar keywords in comments and strings."
    :lighter ""
    :keymap hl-todo-mode-map
    :group 'hl-todo
    (if hl-todo-mode
    (hl-todo--setup)
      (font-lock-remove-keywords nil hl-todo--keywords))
    (when font-lock-mode
      (save-excursion
    (goto-char (point-min))
    (while (hl-todo--search)
      (save-excursion
    (font-lock-fontify-region (match-beginning 0) (match-end 0) nil))))))

  ;;;###autoload
  (define-globalized-minor-mode global-hl-todo-mode
    hl-todo-mode hl-todo--turn-on-mode-if-desired)

  (defun hl-todo--turn-on-mode-if-desired ()
    (when (and (apply #'derived-mode-p hl-todo-activate-in-modes)
           (not (derived-mode-p 'org-mode)))
      (hl-todo-mode 1)))

  ;;;###autoload
  (defun hl-todo-next (arg)
    "Jump to the next TODO or similar keyword.
  The prefix argument ARG specifies how many keywords to move.
  A negative argument means move backward that many keywords."
    (interactive "p")
    (if (< arg 0)
    (hl-todo-previous (- arg))
      (while (and (> arg 0)
          (not (eobp))
          (progn
            (when (let ((case-fold-search nil))
                (looking-at hl-todo--regexp))
              (goto-char (match-end 0)))
            (or (hl-todo--search)
            (user-error "No more matches"))))
    (cl-decf arg))))

  ;;;###autoload
  (defun hl-todo-previous (arg)
    "Jump to the previous TODO or similar keyword.
  The prefix argument ARG specifies how many keywords to move.
  A negative argument means move forward that many keywords."
    (interactive "p")
    (if (< arg 0)
    (hl-todo-next (- arg))
      (while (and (> arg 0)
          (not (bobp))
          (let ((start (point)))
            (hl-todo--search (concat hl-todo--regexp "\\=") nil t)
            (or (hl-todo--search nil nil t)
            (progn (goto-char start)
                   (user-error "No more matches")))))
    (goto-char (match-end 0))
    (cl-decf arg))))

  ;;;###autoload
  (defun hl-todo-occur ()
    "Use `occur' to find all TODO or similar keywords.
  This actually finds a superset of the highlighted keywords,
  because it uses a regexp instead of a more sophisticated
  matcher."
    (interactive)
    (occur hl-todo--regexp))

  ;;;###autoload
  (defun hl-todo-insert-keyword (keyword)
    "Insert TODO or similar keyword.
  If point is not inside a string or comment, then insert a new
  comment.  If point is at the end of the line, then insert the
  comment there, otherwise insert it as a new line before the
  current line."
    (interactive
     (list (completing-read
        "Insert keyword: "
        (mapcar (pcase-lambda (`(,keyword . ,face))
              (propertize keyword 'face
                  (if (stringp face)
                      (list :inherit 'hl-todo :foreground face)
                    face)))
            hl-todo-keyword-faces))))
    (cond
     ((hl-todo--inside-comment-or-string-p)
      (insert (concat (and (not (memq (char-before) '(?\s ?\t))) " ")
              keyword
              (and (not (memq (char-after) '(?\s ?\t ?\n))) " "))))
     ((eolp)
      (insert (concat (and (not (memq (char-before) '(?\s ?\t))) " ")
              (format "%s %s " comment-start keyword))))
     (t
      (goto-char (line-beginning-position))
      (insert (format "%s %s \n"
              (if (derived-mode-p 'lisp-mode 'emacs-lisp-mode)
              (format "%s%s" comment-start comment-start)
            comment-start)
              keyword))
      (backward-char)
      (indent-region (line-beginning-position) (line-end-position)))))

  ;;; _
  (provide 'hl-todo)
  ;; Local Variables:
  ;; indent-tabs-mode: nil
  ;; End:
  ;;; hl-todo.el ends here
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (global-hl-todo-mode)
#+END_SRC
* Evil
[[https://github.com/emacs-evil/evil-collection][Evil-Collection]]

[[https://github.com/Somelauw/evil-org-mode][evil-org]]

#+BEGIN_SRC emacs-lisp
  ;; Vim mode
  (use-package evil
    :init
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))

  (use-package evil-escape
    :init
    (setq-default evil-escape-key-sequence "fd")
    :defer t
    ;; Only needed for functions without an autoload comment (;;;###autoload).
    :commands (evil-escape-pre-command-hook)

    ;; Adding to a hook won't load the function until we invoke it.
    ;; With pre-command-hook, that means the first command we run will
    ;; load evil-escape.
    :init (add-hook 'pre-command-hook 'evil-escape-pre-command-hook))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (use-package evil-surround
    :config
    (global-evil-surround-mode 1))

  (use-package evil-commentary
    :defer 2
    :config
    (evil-commentary-mode))

  (use-package evil-org
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
          (lambda ()
        (evil-org-set-key-theme))))

  (add-hook 'org-agenda-mode-hook
        (lambda ()
          (require 'evil-org-agenda)
          (evil-org-agenda-set-keys)))

  (defun my-center-line (&rest _)
    (evil-scroll-line-to-center nil))

  (advice-add 'evil-search-next :after #'my-center-line)
#+END_SRC
*** Lispyville
https://github.com/noctuid/lispyville

Just because of

#+BEGIN_QUOTE
If you are just looking for a way to prevent evil’s
operators from unbalancing parentheses, you can enable lispyville-mode
in your configuration and just ignore the rest of its features.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  (use-package lispyville
    :config
    (add-hook 'emacs-lisp-mode-hook 'lispyville-mode)
    (add-hook 'lisp-mode-hook 'lispyville-mode))
#+END_SRC
* ripgrep
https://oremacs.com/2017/08/04/ripgrep/

#+BEGIN_SRC emacs-lisp
  (use-package rg)
  (setq counsel-git-cmd "rg --files")
  (setq counsel-rg-base-command
    "rg -S -M 120 --no-heading --line-number --color never %s .")
#+END_SRC

#+begin_src emacs-lisp
  (use-package rg
   :init
   (rg-enable-default-bindings))
#+end_src
* CANCELLED Key-chord                                             :CANCELLED:
CLOSED: [2018-12-27 Thu 20:37]
:LOGBOOK:
- State "CANCELLED"  from              [2018-12-27 Thu 20:37] \\
  not sure if I want to use this
:END:
Good candidates, taken from comment [[https://www.emacswiki.org/emacs/KeyChord][here]].
=bv, bk, cf, vc, xs, xv=
#+BEGIN_SRC emacs-lisp
  ;; should i use this, move this function
  (defun ck-show-org-agenda(&optional arg)
    (interactive "P")
    (org-agenda arg "d"))

  (use-package key-chord
     :defer nil
     :config
     (key-chord-mode 1))

  (general-define-key
    :states '(normal visual insert emacs motion)
              (general-chord "xc") 'counsel-recentf
              (general-chord "xv") 'counsel-find-file
              (general-chord "xs") 'ck-show-org-agenda)


  ;; (org-agenda-show-unscheduled)
#+END_SRC
* Ivy
Use amx to save recent M-x items

#+BEGIN_SRC emacs-lisp
  (use-package amx)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish (ivy-mode . "") ; does not display ivy in the modeline
    :init (ivy-mode 1)        ; enable ivy globally at startup
    ;:bind (:map ivy-mode-map  ; bind in the ivy buffer
    ;       ("C-'" . ivy-avy)) ; C-' to ivy-avy
    :config
    (setq ivy-use-virtual-buffers t)    ; extend searching to bookmarks and
    (setq ivy-height 20)                ; set height of the ivy window
    (setq ivy-count-format "(%d/%d) ")  ; count format, from the ivy help page
    (setq ivy-initial-inputs-alist nil) ; no "^" at beginning
    )

  (setq counsel-grep-base-command
    "rg -i -M 120 --no-heading --line-number --color never '%s' %s")

  (general-define-key
    :states '(normal visual insert emacs)
    :prefix "SPC"
    :non-normal-prefix "M-SPC"
    "SPC" '(counsel-M-x :which-key "M-x")
    ;; Buffers
    "bb"  '(ivy-switch-buffer :which-key "buffers list")
    ;; Files
    "ff"  '(counsel-find-file :which-key "find files")
    "fr"  '(counsel-recentf :which-key "recent files")
    ;; Search
    "s/"   '(swiper :which-key "swiper")
    "sa"   '(swiper-all :which-key "swiper-all")
    "ss"   '(counsel-rg :which-key "ripgrep"))

  ;; https://www.reddit.com/r/emacs/comments/910pga/tip_how_to_use_ivy_and_its_utilities_in_your/
  (use-package ivy-rich
    :after ivy
    :custom
    (ivy-virtual-abbreviate 'full
                ivy-rich-switch-buffer-align-virtual-buffer t
                ivy-rich-path-style 'abbrev)
    :config
    (ivy-rich-mode 1)

    (setq ivy-rich--display-transformers-list
     '(ivy-switch-buffer
       (:columns
    ((ivy-rich-candidate (:width 30))  ; return the candidate itself
     (ivy-rich-switch-buffer-size (:width 7))  ; return the buffer size
     (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right)); return the buffer indicators
     (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))          ; return the major mode info
     (ivy-rich-switch-buffer-project (:width 15 :face success))             ; return project name using `projectile'
     (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))  ; return file path relative to project root or `default-directory' if project is nil
    :predicate
    (lambda (cand) (get-buffer cand)))
       counsel-M-x
       (:columns
    ((counsel-M-x-transformer (:width 40))  ; thr original transfomer
     (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))  ; return the docstring of the command
       counsel-describe-function
       (:columns
    ((counsel-describe-function-transformer (:width 40))  ; the original transformer
     (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))  ; return the docstring of the function
       counsel-describe-variable
       (:columns
    ((counsel-describe-variable-transformer (:width 40))  ; the original transformer
     (ivy-rich-counsel-variable-docstring (:face font-lock-doc-face))))  ; return the docstring of the variable
       counsel-recentf
       (:columns
    ((ivy-rich-candidate (:width 0.8)) ; return the candidate itself
     (ivy-rich-file-last-modified-time (:face font-lock-comment-face)))))) ; return the last modified time of the file
  )

  (use-package swiper
    :after ivy)

  (use-package avy
    :demand t
    :config
      (setq avy-timeout-seconds 0.2)
    (general-define-key
      :states '(motion normal visual insert emacs)
      "C-d"  'avy-goto-char-timer))

  (use-package counsel
    :diminish
    :after ivy
  ;  :bind*                           ; load counsel when pressed
  ;  (("M-x"     . counsel-M-x)       ; M-x use counsel
  ;   ("C-x C-f" . counsel-find-file) ; C-x C-f use counsel-find-file
  ;   ("C-x C-r" . counsel-recentf)   ; search recently edited files
  ;   ("C-c f"   . counsel-git)       ; search for files in git repo
  ;   ("C-c s"   . counsel-git-grep)  ; search for regexp in git repo
  ;   ("C-c /"   . counsel-ag)        ; search for regexp in git repo using ag
  ;   ("C-c l"   . counsel-locate))   ; search for files or else using locate
    )

  (general-define-key
    :states '(motion normal visual insert emacs)
    "C-s" 'swiper
    "C-c C-r" 'ivy-resume
    "C-h f" 'counsel-describe-function
    "C-h v" 'counsel-describe-variable
    "M-x" 'counsel-M-x)

  (setq ivy-re-builders-alist
    '((counsel-M-x . ivy--regex-fuzzy)
      (counsel-describe-function . ivy--regex-fuzzy)
      (counsel-describe-variable . ivy--regex-fuzzy)
      (t . ivy--regex-plus)))
#+END_SRC
* Ace-window
https://cestlaz-nikola.github.io/posts/using-emacs-5-windows/
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
     ((t (:inherit ace-jump-face-foreground :height 3.0)))))))
#+END_SRC
* Eyebrowse
#+BEGIN_SRC emacs-lisp
  (use-package eyebrowse
    :init
    (eyebrowse-mode t))
#+END_SRC
* Which-key
#+BEGIN_SRC emacs-lisp
  ;; Which Key
  (use-package which-key
    :defer nil
    :init
    (setq which-key-separator " ")
    (setq which-key-prefix-prefix "+")
    :config
    (which-key-mode 1))
#+END_SRC
* Ranger
#+BEGIN_SRC emacs-lisp
  (use-package ranger
  :init
    (general-define-key
      :states '(normal visual insert emacs)
      :prefix "SPC"
      :non-normal-prefix "M-SPC"
      "fn" '(ranger :which-key "Ranger"))
  :config
    (ranger-override-dired-mode t)
  )
#+END_SRC
* eshell
https://www.reddit.com/r/emacs/comments/9vk7iz/emacs_popup_shell/
#+BEGIN_SRC emacs-lisp
  (defun eshell-here ()
    "Opens up a new shell in the directory associated with the
  current buffer's file. The eshell is renamed to match that
  directory to make multiple eshell windows easier."
    (interactive)
    (let* ((parent (if (buffer-file-name)
               (file-name-directory (buffer-file-name))
             default-directory))
       (height (/ (window-total-height) 3))
       (name   (car (last (split-string parent "/" t)))))
      (split-window-vertically (- height))
      (other-window 1)
      (eshell "new")
      (rename-buffer (concat "*eshell: " name "*"))

      (insert (concat "ls"))
      (eshell-send-input)))

  (defun eshell/x ()
    (kill-buffer-and-window)) ; (I also set kill-buffer-and-window to C-x K)
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
;; Projectile
(use-package projectile
  :init
  (setq projectile-require-project-root nil)
  :config
  (projectile-mode 1))
#+END_SRC
* Org
*** org-drill
#+BEGIN_SRC emacs-lisp
  (require 'cl)
  (use-package org-drill
    :ensure org-plus-contrib
    :commands (org-drill))
#+END_SRC
*** use-package
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :after evil
    :init
      (defun ck-set-home-agenda ()
    (interactive)
    (setq my-org-dir "c:/docs/org/")
    (setq org-agenda-files (list my-org-dir))
    (setq org-agenda-tag-filter-preset '("-@work" "-REFILE")))

      (defun ck-set-work-agenda ()
    (interactive)
    (setq my-org-dir "c:/docs/org/")
    (setq org-agenda-files (list my-org-dir))
    (setq org-agenda-tag-filter-preset '("-@home" "-REFILE")))

      (defun ck-set-calendar-agenda ()
    (interactive)
    (setq my-org-dir "c:/docs/org/calendar/")
    (setq org-agenda-files (list my-org-dir)))

      (when (my-system-type-is-gnu)
    (setq my-org-dir "~/org/"))

      (when (my-system-is-mypc)
    (setq my-org-dir "c:/docs/org/"
          org-agenda-tag-filter-preset '("-@work" "-REFILE")))

      (when (my-system-is-myoldworkpc)
    (setq my-org-dir "c:/Users/chris.keschnat/Documents/docs/org/"
          org-agenda-tag-filter-preset '("-@home" "-REFILE")))

      (when (my-system-is-myworkpc)
    (setq my-org-dir "c:/docs/org/"
          org-agenda-tag-filter-preset '("-@home" "-REFILE")))

    :mode
    (("\\.txt$" . org-mode))

    :config
#+END_SRC
*** Keybindings
#+BEGIN_SRC emacs-lisp
 (general-def 'motion
   "RET" 'org-open-at-point
   "t" 'org-todo)
#+END_SRC
*** Background colors for export
#+BEGIN_SRC emacs-lisp
;; background colors for export http://ivanmalison.github.io/dotfiles/#setbackgroundcolorofsourceblocksforexport
    (progn
    (defun imalison:org-inline-css-hook (exporter)
    "Insert custom inline css to automatically set the
    background of code to whatever theme I'm using's background"
    (when (eq exporter 'html)
    (let* ((my-pre-bg (face-background 'default))
        (my-pre-fg (face-foreground 'default)))
        (setq
        org-html-head-extra
        (concat
        org-html-head-extra
        (format "<style type=\"text/css\">\n pre.src {background-color: %s; color: %s;}</style>\n"
            my-pre-bg my-pre-fg))))))

    (add-hook 'org-export-before-processing-hook 'imalison:org-inline-css-hook))
#+END_SRC

*** Ellipsis
"↝" "⇉" "⇝" "⇢" "⇨" "⇰" "➔" "➙" "➛" "➜" "➝" "➞"

"➟" "➠" "➡" "➥" "➦" "➧" "➨"

"➩" "➪" "➮" "➯" "➱" "➲"

"➳" "➵" "➸" "➺" "➻" "➼" "➽"
arrow heads

"➢" "➣" "➤" "≪", "≫", "«", "»"
other arrows

"↞" "↠" "↟" "↡" "↺" "↻"
lightening

"⚡"
other symbols

…, ▼, ↴, , ∞, ⬎, ⤷, ⤵

→
⤵
#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis " ▼")
#+END_SRC
*** Screenshots
http://www.sastibe.de/2018/11/take-screenshots-straight-into-org-files-in-emacs-on-win10/

Maybe inside a subdirectory? E.g.:
#+BEGIN_EXAMPLE
(concat default-directory
    "images/"
    (file-name-nondirectory buffer-file-name)
    "_"
    (format-time-string "%Y%m%d_%H%M%S_"))  ".png"
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
  (defun ck/org-screenshot ()
    "Take a screenshot into a time stamped unique-named file in the
  same directory as the org-buffer and insert a link to this file."
    (interactive)
    (setq filename
      (concat
       (make-temp-name
        (concat (buffer-file-name)
            "_"
            (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
    (shell-command "snippingtool /clip")
    (shell-command (concat "powershell -command \"Add-Type -AssemblyName System.Windows.Forms;if ($([System.Windows.Forms.Clipboard]::ContainsImage())) {$image = [System.Windows.Forms.Clipboard]::GetImage();[System.Drawing.Bitmap]$image.Save('" filename "',[System.Drawing.Imaging.ImageFormat]::Png); Write-Output 'clipboard content saved as file'} else {Write-Output 'clipboard does not contain image data'}\""))
    (insert (concat "[[file:" filename "]]"))
    (org-display-inline-images))
#+END_SRC
*** Archive location
#+BEGIN_SRC emacs-lisp
(setq org-archive-location "archive/%s_archive::")
#+END_SRC
*** Hide markers
#+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers t)
#+END_SRC
*** Fold everything when opening
#+BEGIN_SRC emacs-lisp
(setq org-startup-indented t)
#+END_SRC
*** No superscripts
#+BEGIN_SRC emacs-lisp
(setq org-export-with-sub-superscripts nil)
#+END_SRC
*** src-blocks
#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil
    org-src-fontify-natively t
    org-src-tab-acts-natively t
    org-src-window-setup 'current-window)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (ruby . t)
     (shell . t)
     (ledger . t)))
#+END_SRC
*** Agenda
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (list my-org-dir))

  (setq org-agenda-text-search-extra-files '(agenda-archives))
#+END_SRC
*** Not yet sorted
#+BEGIN_SRC emacs-lisp
  ;; TODO(chris) use this?
  ;; (setq org-publish-project-alist
  ;;       '(("org"
  ;;          :base-directory "c:/docs/org/"
  ;;          :publishing-directory "c:/docs/org/html/"
  ;;          :publishing-function org-html-publish-to-html
  ;;          :section-numbers nil
  ;;          :table-of-contents nil)))

  (setq org-blank-before-new-entry '((heading . nil) (plain-list-item . auto)))

  (setq org-enforce-todo-dependencies t)
  (setq org-enforce-todo-checkbox-dependencies t)

  (setq org-log-into-drawer t)
  (setq org-log-redeadline (quote time))
  (setq org-log-reschedule (quote time))
  (setq org-log-done (quote time))

  (setq org-clock-persist 'history)
  (org-clock-persistence-insinuate)

  (setq org-default-notes-file (concat (car org-agenda-files) "inbox.org"))
  ;; More headings for refile
  ;; (setq org-refile-targets '((org-agenda-files . (:maxlevel . 6))))
  (setq org-refile-targets '((nil :maxlevel . 9)
                  (org-agenda-files :maxlevel . 9)))
  (setq org-refile-use-outline-path 'file)              ; Show full paths for refiling
  (setq org-outline-path-complete-in-steps nil)         ; Refile in a single go

  (setq helm-org-rifle-show-path t)
  (setq org-refile-allow-creating-parent-nodes 'confirm)

  (setq org-todo-keyword-faces
      '(("TODO" . org-warning)
      ("SOMEDAY" . (:foreground "moccasin" :weight bold))
      ("WAIT" . (:foreground "lavender blush" :weight bold))
      ("CANCELLED" . org-done)))

  (setq org-todo-keywords
      '((sequence "TODO(t)" "WAIT(w@/!)" "SOMEDAY(s)" "|" "CANCELLED(c@)" "DONE(d!)")))
  (setq org-tag-alist (quote (
                  ("WAIT" . ?A)
                  ("CANCELLED" . ?C)
                  ("watch" . ?w)
                  ("read" . ?r)
                  )))

  (setq org-capture-templates
      (quote (("t" "todo" entry (file "") "* TODO %?\nEntered: %U\n")
          ("w" "wait" entry (file "") "* WAIT %?\nEntered: %U\n")
          ("c" "clipboard" entry (file "") "* TODO %?\n\n#+BEGIN_QUOTE\n  %c\n#+END_QUOTE\n\nEntered: %U\n")
          ("l" "linked todo" entry (file "") "* TODO %?\nEntered: %U\n%a\n")
          ("s" "calendar entry" entry (file org-caldav-inbox) "* %?\nSCHEDULED: %^{Scheduled to begin}t\n")
          ("n" "note" entry (file "") "* %? :NOTE:\n%U\n%a\n")
          )))

  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (require 'org-tempo)

  (add-hook 'org-capture-mode-hook 'evil-insert-state)

  (setq org-use-fast-todo-selection t)
  (setq org-todo-state-tags-triggers
      (quote (("CANCELLED" ("CANCELLED" . t))
          ("WAIT" ("WAIT" . t))
          (done ("WAIT"))
          ("" ("WAIT") ("CANCELLED"))
          ("TODO" ("WAIT") ("CANCELLED"))
          ("DONE" ("WAIT") ("CANCELLED")))))
#+END_SRC
*** Custom agenda
https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html
#+BEGIN_SRC emacs-lisp
    (defun air-org-skip-subtree-if-priority (priority)
    "Skip an agenda subtree if it has a priority of PRIORITY.

    PRIORITY may be one of the characters ?A, ?B, or ?C."
    (let ((subtree-end (save-excursion (org-end-of-subtree t)))
        (pri-value (* 1000 (- org-lowest-priority priority)))
        (pri-current (org-get-priority (thing-at-point 'line t))))
    (if (= pri-value pri-current)
        subtree-end
        nil)))

    (setq org-agenda-custom-commands
        '(("d" "Daily agenda and all TODOs"
        ((tags "PRIORITY=\"A\""
            ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
            (org-agenda-overriding-header "High-priority unfinished tasks:")))
         (agenda "" ((org-agenda-span 'day)))
        (alltodo ""
            ((org-agenda-skip-function '(or (air-org-skip-subtree-if-priority ?A)
                            (org-agenda-skip-if nil '(scheduled deadline))
                            (org-agenda-skip-entry-if 'todo '("SOMEDAY"))))
             (org-agenda-overriding-header "\nNormal priority TODO tasks:")))
        (alltodo ""
            ((org-agenda-skip-function '(or (air-org-skip-subtree-if-priority ?A)
                            (org-agenda-skip-if nil '(scheduled deadline))
                            (org-agenda-skip-entry-if 'nottodo '("SOMEDAY"))))
             (org-agenda-overriding-header "\nSOMEDAY:"))))
        ((org-agenda-compact-blocks t)))))
#+END_SRC
*** Faces/UI
#+BEGIN_SRC emacs-lisp
  (when (display-graphic-p)
    (let* ((variable-tuple (cond ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
                 ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
                 ((x-list-fonts "Verdana")         '(:font "Verdana"))
                 ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
                 (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
       (base-font-color     (face-foreground 'default nil 'default))
       (headline           `(:inherit default :weight bold :foreground ,base-font-color)))

      (custom-theme-set-faces 'user
                  `(org-level-8 ((t (,@headline ,@variable-tuple))))
                  `(org-level-7 ((t (,@headline ,@variable-tuple))))
                  `(org-level-6 ((t (,@headline ,@variable-tuple))))
                  `(org-level-5 ((t (,@headline ,@variable-tuple))))
                  `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
                  `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
                  `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5))))
                  `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75))))
                  `(org-document-title ((t (,@headline ,@variable-tuple :height 1.5 :underline nil))))))

    (setq org-fontify-done-headline t)
    (custom-set-faces
     '(org-done ((t (:foreground "PaleGreen"
             :weight normal
             :strike-through t))))
     '(org-headline-done
        ((((class color) (min-colors 16) (background dark))
           (:foreground "LightSalmon" :strike-through t))))))

  ;; circles instead of dashes in lists
  (font-lock-add-keywords 'org-mode
              '(("^ *\\([-]\\) "
                  (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
  ) ;; END use-package org
#+END_SRC
*** Bullets
https://zhangda.wordpress.com/2016/02/15/configurations-for-beautifying-emacs-org-mode/

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets)
  ;;:config
    ;;(setq org-bullets-bullet-list '("■" "◆" "▲" "▶"))
    ;;(setq org-bullets-bullet-list '("✙" "♱" "♰" "☥" "✞" "✟" "✝" "†" "✠" "✚" "✜" "✛" "✢" "✣" "✤" "✥")))
    ;;(setq org-bullets-bullet-list '("✡" "⎈" "✽" "✲" "✱" "✻" "✼" "✽" "✾" "✿" "❀" "❁" "❂" "❃" "❄" "❅" "❆" "❇"))
    ;;(setq org-bullets-bullet-list '("○" "☉" "◎" "◉" "○" "◌" "◎" "●" "◦" "◯" "⚪" "⚫" "⚬" "❍" "￮" "⊙" "⊚" "⊛" "∙" "∘"))
    ;;(setq org-bullets-bullet-list '("◐" "◑" "◒" "◓" "◴" "◵" "◶" "◷" "⚆" "⚇" "⚈" "⚉" "♁" "⊖" "⊗" "⊘"))
    ;;(setq org-bullets-bullet-list '("♠" "♣" "♥" "♦" "♤" "♧" "♡" "♢"))
    ;;(setq org-bullets-bullet-list '("☯" "☰" "☱" "☲" "☳" "☴" "☵" "☶" "☷"))
    ;;(setq org-bullets-bullet-list '("☀" "♼" "☼" "☾" "☽" "☣" "§" "¶" "‡" "※" "✕" "△" "◇" "▶" "◀" "◈"))

  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC
**** make org-bullets faster under windows
https://github.com/sabof/org-bullets/issues/11#issuecomment-439228372

#+BEGIN_SRC emacs-lisp
  (setq inhibit-compacting-font-caches t)
#+END_SRC
*** org-journal

https://www.reddit.com/r/emacs/comments/8kz8dv/tip_how_i_use_orgjournal_to_improve_my/

#+BEGIN_SRC emacs-lisp
  (use-package org-journal
    :ensure t
    :after org
    :init

    (setq org-journal-dir
            (concat my-org-dir "journal"))

    (setq org-journal-file-format "%Y%m%d.org")
    (setq org-journal-enable-agenda-integration t)
    (setq org-journal-carryover-items "TODO=\"TODO\"|TODO=\"WAITING\"|TODO=\"SOMEDAY\"")
    :config
      (defun org-journal-find-location ()
        ;; Open today's journal, but specify a non-nil prefix argument in order to
        ;; inhibit inserting the heading; org-capture will insert the heading.
        (org-journal-new-entry t)
        ;; Position point on the journal's top-level heading so that org-capture
        ;; will add the new entry as a child entry.
        (goto-char (point-min)))

      (setq org-capture-templates
        (append
          '(("j" "Journal entry" entry (function org-journal-find-location)
            "* %?\n%T\n%i"))
        org-capture-templates))

      (defun ck/org-journal-find-location ()
        "The foo"
        (interactive)
        (org-journal-new-entry t))

      (general-define-key
        :states '(normal visual insert emacs)
        :prefix "SPC"
        :non-normal-prefix "M-SPC"
        "js" '(org-journal-new-scheduled-entry :which-key "scheduled capture")
        "jv" '(ck/org-journal-find-location :which-key "view today")
        "j/" '(org-journal-search-forever :which-key "search")
        "ji" '(org-clock-in :which-key "org-clock-in")
        "jo" '(org-clock-out :which-key "org-clock-out")))
#+END_SRC

*** org-brain

https://github.com/Kungsgeten/org-brain

#+BEGIN_SRC emacs-lisp
  (use-package org-brain
    :init
    (setq org-brain-path "c:/docs/org/brain")
    ;; For Evil users
    (with-eval-after-load 'evil
      (evil-set-initial-state 'org-brain-visualize-mode 'emacs))
    :config
    (setq org-id-track-globally t)
    (setq org-id-locations-file "~/.emacs.d/.org-id-locations")
    (push '("b" "Brain" plain (function org-brain-goto-end)
        "* %i%?" :empty-lines 1)
      org-capture-templates)
    (setq org-brain-visualize-default-choices 'all)
    (setq org-brain-title-max-length 12))
#+END_SRC
*** htmlize
To export to html.

#+BEGIN_SRC emacs-lisp
  (use-package htmlize)
#+END_SRC
*** Archive

https://github.com/daviderestivo/galactic-emacs/blob/master/lisp/org-archive-subtree.el

#+BEGIN_SRC emacs-lisp
  ;; Archive subtrees under the same hierarchy as the original org file.
  ;; Link: https://gist.github.com/Fuco1/e86fb5e0a5bb71ceafccedb5ca22fcfb
  ;;
  (require 'dash)

  (defadvice org-archive-subtree (around fix-hierarchy activate)
    (let* ((fix-archive-p (and (not current-prefix-arg)
                               (not (use-region-p))))
           (afile  (car (org-archive--compute-location
                 (or (org-entry-get nil "ARCHIVE" 'inherit) org-archive-location))))
           (buffer (or (find-buffer-visiting afile) (find-file-noselect afile))))
      ad-do-it
      (when fix-archive-p
        (with-current-buffer buffer
          (goto-char (point-max))
          (while (org-up-heading-safe))
          (let* ((olpath (org-entry-get (point) "ARCHIVE_OLPATH"))
                 (path (and olpath (split-string olpath "/")))
                 (level 1)
                 tree-text)
            (when olpath
              (org-mark-subtree)
              (setq tree-text (buffer-substring (region-beginning) (region-end)))
              (let (this-command) (org-cut-subtree))
              (goto-char (point-min))
              (save-restriction
                (widen)
                (-each path
                  (lambda (heading)
                    (if (re-search-forward
                         (rx-to-string
                          `(: bol (repeat ,level "*") (1+ " ") ,heading)) nil t)
                        (org-narrow-to-subtree)
                      (goto-char (point-max))
                      (unless (looking-at "^")
                        (insert "\n"))
                      (insert (make-string level ?*)
                              " "
                              heading
                              "\n"))
                    (cl-incf level)))
                (widen)
                (org-end-of-subtree t t)
                (org-paste-subtree level tree-text))))))))
#+END_SRC
*** pamparam
#+BEGIN_SRC emacs-lisp
  (use-package pamparam :ensure t)
#+END_SRC
*** ox-jira
#+BEGIN_SRC emacs-lisp
  (use-package ox-jira
    :defer 1
    :after org)
#+END_SRC
*** org-web-tools
#+BEGIN_SRC emacs-lisp
  (use-package org-web-tools
    :commands 'org-web-tools-read-url-as-org)
#+END_SRC
* Navigation
*** Alternate buffer
#+BEGIN_SRC emacs-lisp
(defun spacemacs/alternate-buffer (&optional window)
  "Switch back and forth between current and last buffer in the
current window."
  (interactive)
  (let ((current-buffer (window-buffer window))
    (buffer-predicate
     (frame-parameter (window-frame window) 'buffer-predicate)))
    ;; switch to first buffer previously shown in this window that matches
    ;; frame-parameter `buffer-predicate'
    (switch-to-buffer
     (or (cl-find-if (lambda (buffer)
               (and (not (eq buffer current-buffer))
                (or (null buffer-predicate)
                (funcall buffer-predicate buffer))))
             (mapcar #'car (window-prev-buffers window)))
     ;; `other-buffer' honors `buffer-predicate' so no need to filter
     (other-buffer current-buffer t)))))
#+END_SRC
*** Movement
#+BEGIN_SRC emacs-lisp
  (general-define-key
    :states '(normal visual insert emacs)
    "C-j" 'forward-paragraph
    "C-k" 'backward-paragraph)

  ;; TODO(chris): make this work (works with eval-region)
  ;; (evil-define-key 'evilified org-agenda-mode-map (kbd "j") 'org-agenda-next-item)
  ;; (evil-define-key 'evilified org-agenda-mode-map (kbd "k") 'org-agenda-previous-item)
#+END_SRC
*** expand-region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :defer nil
    :config
      (general-define-key
      :states '(motion normal visual insert emacs)
      "M-n" 'er/expand-region
      "M-p" 'er/contract-region))
#+END_SRC
* Hydra
https://github.com/abo-abo/hydra/wiki/Org-agenda

#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :defer 2
    :config

    ;; Hydra for org agenda (graciously taken from Spacemacs)
    (defhydra hydra-org-agenda (:pre (setq which-key-inhibit t)
                     :post (setq which-key-inhibit nil)
                     :hint none)
      "
    Org agenda (_q_uit)

    ^Clock^      ^Visit entry^              ^Date^             ^Other^
    ^-----^----  ^-----------^------------  ^----^-----------  ^-----^---------
    _ci_ in      _SPC_ in other window      _ds_ schedule      _gr_ reload
    _co_ out     _TAB_ & go to location     _dd_ set deadline  _._  go to today
    _cq_ cancel  _RET_ & del other windows  _dt_ timestamp     _gd_ go to date
    _cj_ jump    _o_   link                 _+_  do later      ^^
    ^^           ^^                         _-_  do earlier    ^^
    ^^           ^^                         ^^                 ^^
    ^View^          ^Filter^                 ^Headline^         ^Toggle mode^
    ^----^--------  ^------^---------------  ^--------^-------  ^-----------^----
    _vd_ day        _ft_ by tag              _ht_ set status    _tf_ follow
    _vw_ week       _fr_ refine by tag       _hk_ kill          _tl_ log
    _vt_ fortnight  _fc_ by category         _hr_ refile        _ta_ archive trees
    _vm_ month      _fh_ by top headline     _hA_ archive       _tA_ archive files
    _vy_ year       _fx_ by regexp           _h:_ set tags      _tr_ clock report
    _vn_ next span  _fd_ delete all filters  _hp_ set priority  _td_ diaries
    _vp_ prev span  ^^                       ^^                 ^^
    _vr_ reset      ^^                       ^^                 ^^
    ^^              ^^                       ^^                 ^^
    "
      ;; Entry
      ("hA" org-agenda-archive-default)
      ("hk" org-agenda-kill)
      ("hp" org-agenda-priority)
      ("hr" org-agenda-refile)
      ("h:" org-agenda-set-tags)
      ("ht" org-agenda-todo)
      ;; Visit entry
      ("o"   link-hint-open-link :exit t)
      ("<tab>" org-agenda-goto :exit t)
      ("TAB" org-agenda-goto :exit t)
      ("SPC" org-agenda-show-and-scroll-up)
      ("RET" org-agenda-switch-to :exit t)
      ;; Date
      ("dt" org-agenda-date-prompt)
      ("dd" org-agenda-deadline)
      ("+" org-agenda-do-date-later)
      ("-" org-agenda-do-date-earlier)
      ("ds" org-agenda-schedule)
      ;; View
      ("vd" org-agenda-day-view)
      ("vw" org-agenda-week-view)
      ("vt" org-agenda-fortnight-view)
      ("vm" org-agenda-month-view)
      ("vy" org-agenda-year-view)
      ("vn" org-agenda-later)
      ("vp" org-agenda-earlier)
      ("vr" org-agenda-reset-view)
      ;; Toggle mode
      ("ta" org-agenda-archives-mode)
      ("tA" (org-agenda-archives-mode 'files))
      ("tr" org-agenda-clockreport-mode)
      ("tf" org-agenda-follow-mode)
      ("tl" org-agenda-log-mode)
      ("td" org-agenda-toggle-diary)
      ;; Filter
      ("fc" org-agenda-filter-by-category)
      ("fx" org-agenda-filter-by-regexp)
      ("ft" org-agenda-filter-by-tag)
      ("fr" org-agenda-filter-by-tag-refine)
      ("fh" org-agenda-filter-by-top-headline)
      ("fd" org-agenda-filter-remove-all)
      ;; Clock
      ("cq" org-agenda-clock-cancel)
      ("cj" org-agenda-clock-goto :exit t)
      ("ci" org-agenda-clock-in :exit t)
      ("co" org-agenda-clock-out)
      ;; Other
      ("q" nil :exit t)
      ("gd" org-agenda-goto-date)
      ("." org-agenda-goto-today)
      ("gr" org-agenda-redo)))

     (general-define-key
       :states 'motion
       :keymaps 'org-agenda-mode-map
       "v" 'hydra-org-agenda/body)

#+END_SRC
* puppet
https://github.com/puppetlabs/puppet-syntax-emacs

*** TODO defer loading of puppet stuff

#+BEGIN_SRC emacs-lisp
;;; puppet-mode.el --- A simple mode for editing puppet manifests

;; Copyright (C) 2011 Puppet Labs Inc

;; Author: Russ Allbery <rra@stanford.edu>
;; Maintainer: <info@puppetlabs.com>

;; This file is not part of GNU Emacs.

;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.

;;; Commentary:

;; A simple mode for editing puppet manifests.

;;; Code:

(defconst puppet-mode-version "0.2")

(defvar puppet-mode-abbrev-table nil
  "Abbrev table in use in puppet-mode buffers.")

(define-abbrev-table 'puppet-mode-abbrev-table ())

(defcustom puppet-indent-level 2
  "*Indentation of Puppet statements."
  :type 'integer :group 'puppet)

(defcustom puppet-include-indent 2
  "*Indentation of continued Puppet include statements."
  :type 'integer :group 'puppet)

(defvar puppet-mode-map
  (let ((map (make-sparse-keymap)))
    (define-key map "\C-j" 'newline-and-indent)
    (define-key map "\C-m" 'newline-and-indent)
    map)
  "Key map used in puppet-mode buffers.")

(defvar puppet-mode-syntax-table
  (let ((table (make-syntax-table)))
    (modify-syntax-entry ?\' "\"'"  table)
    (modify-syntax-entry ?\" "\"\"" table)
    (modify-syntax-entry ?#  "<"    table)
    (modify-syntax-entry ?\n ">#"   table)
    (modify-syntax-entry ?\\ "\\"   table)
    (modify-syntax-entry ?$  "'"    table)
    (modify-syntax-entry ?-  "_"    table)
    (modify-syntax-entry ?:  "_"    table)
    (modify-syntax-entry ?>  "."    table)
    (modify-syntax-entry ?=  "."    table)
    (modify-syntax-entry ?\; "."    table)
    (modify-syntax-entry ?\( "()"   table)
    (modify-syntax-entry ?\) ")("   table)
    (modify-syntax-entry ?\{ "(}"   table)
    (modify-syntax-entry ?\} "){"   table)
    (modify-syntax-entry ?\[ "(]"   table)
    (modify-syntax-entry ?\] ")["   table)
    table)
  "Syntax table in use in puppet-mode buffers.")

(defcustom puppet-indent-tabs-mode nil
  "*Indentation can insert tabs in puppet mode if this is non-nil."
  :type 'boolean :group 'puppet)

(defcustom puppet-comment-column 32
  "*Indentation column of comments."
  :type 'integer :group 'puppet)

(defun puppet-count-matches (re start end)
  "The same as Emacs 22 count-matches, for portability to other versions
of Emacs."
  (save-excursion
    (let ((n 0))
      (goto-char start)
      (while (re-search-forward re end t) (setq n (1+ n)))
      n)))

(defun puppet-comment-line-p ()
  "Return non-nil iff this line is a comment."
  (save-excursion
    (save-match-data
      (beginning-of-line)
      (looking-at (format "\\s-*%s" comment-start)))))

(defun puppet-block-indent ()
  "If point is in a block, return the indentation of the first line of that
block (the line containing the opening brace).  Used to set the indentation
of the closing brace of a block."
  (save-excursion
    (save-match-data
      (let ((opoint (point))
        (apoint (search-backward "{" nil t)))
    (when apoint
      ;; This is a bit of a hack and doesn't allow for strings.  We really
      ;; want to parse by sexps at some point.
      (let ((close-braces (puppet-count-matches "}" apoint opoint))
        (open-braces 0))
        (while (and apoint (> close-braces open-braces))
          (setq apoint (search-backward "{" nil t))
          (when apoint
        (setq close-braces (puppet-count-matches "}" apoint opoint))
        (setq open-braces (1+ open-braces)))))
      (if apoint
          (current-indentation)
        nil))))))

(defun puppet-in-array ()
  "If point is in an array, return the position of the opening '[' of
that array, else return nil."
  (save-excursion
    (save-match-data
      (let ((opoint (point))
        (apoint (search-backward "[" nil t)))
    (when apoint
      ;; This is a bit of a hack and doesn't allow for strings.  We really
      ;; want to parse by sexps at some point.
      (let ((close-brackets (puppet-count-matches "]" apoint opoint))
        (open-brackets 0))
        (while (and apoint (> close-brackets open-brackets))
          (setq apoint (search-backward "[" nil t))
          (when apoint
        (setq close-brackets (puppet-count-matches "]" apoint opoint))
        (setq open-brackets (1+ open-brackets)))))
      apoint)))))

(defun puppet-in-include ()
  "If point is in a continued list of include statements, return the position
of the initial include plus puppet-include-indent."
  (save-excursion
    (save-match-data
      (let ((include-column nil)
        (not-found t))
    (while not-found
      (forward-line -1)
      (cond
       ((bobp)
        (setq not-found nil))
       ((looking-at "^\\s-*include\\s-+.*,\\s-*$")
        (setq include-column
          (+ (current-indentation) puppet-include-indent))
        (setq not-found nil))
       ((not (looking-at ".*,\\s-*$"))
        (setq not-found nil))))
    include-column))))

(defun puppet-indent-line ()
  "Indent current line as puppet code."
  (interactive)
  (beginning-of-line)
  (if (bobp)
      (indent-line-to 0)                ; First line is always non-indented
    (let ((not-indented t)
      (array-start (puppet-in-array))
      (include-start (puppet-in-include))
      (block-indent (puppet-block-indent))
      cur-indent)
      (cond
       (array-start
    ;; This line probably starts with an element from an array.
    ;; Indent the line to the same indentation as the first
    ;; element in that array.  That is, this...
    ;;
    ;;    exec {
    ;;      "add_puppetmaster_mongrel_startup_links":
    ;;      command => "string1",
    ;;      creates => [ "string2", "string3",
    ;;      "string4", "string5",
    ;;      "string6", "string7",
    ;;      "string3" ],
    ;;      refreshonly => true,
    ;;    }
    ;;
    ;; ...should instead look like this:
    ;;
    ;;    exec {
    ;;      "add_puppetmaster_mongrel_startup_links":
    ;;      command => "string1",
    ;;      creates => [ "string2", "string3",
    ;;                   "string4", "string5",
    ;;                   "string6", "string7",
    ;;                   "string8" ],
    ;;      refreshonly => true,
    ;;    }
    (save-excursion
      (goto-char array-start)
      (forward-char 1)
      (re-search-forward "\\S-")
      (forward-char -1)
      (setq cur-indent (current-column))))
       (include-start
    (setq cur-indent include-start))
       ((and (looking-at "^\\s-*},?\\s-*$") block-indent)
    ;; This line contains a closing brace or a closing brace followed by a
    ;; comma and we're at the inner block, so we should indent it matching
    ;; the indentation of the opening brace of the block.
    (setq cur-indent block-indent))
       (t
    ;; Otherwise, we did not start on a block-ending-only line.
    (save-excursion
      ;; Iterate backwards until we find an indentation hint
      (while not-indented
        (forward-line -1)
        (cond
         ;; Comment lines are ignored unless we're at the start of the
         ;; buffer.
         ((puppet-comment-line-p)
          (if (bobp)
          (setq not-indented nil)))

         ;; Brace or paren on a line by itself will already be indented to
         ;; the right level, so we can cheat and stop there.
         ((looking-at "^\\s-*[\)}]\\s-*")
          (setq cur-indent (current-indentation))
          (setq not-indented nil))

         ;; Brace (possibly followed by a comma) or paren not on a line by
         ;; itself will be indented one level too much, but don't catch
         ;; cases where the block is started and closed on the same line.
         ((looking-at "^[^\n\({]*[\)}],?\\s-*$")
          (setq cur-indent (- (current-indentation) puppet-indent-level))
          (setq not-indented nil))

         ;; Indent by one level more than the start of our block.  We lose
         ;; if there is more than one block opened and closed on the same
         ;; line but it's still unbalanced; hopefully people don't do that.
         ((looking-at "^.*{[^\n}]*$")
          (setq cur-indent (+ (current-indentation) puppet-indent-level))
          (setq not-indented nil))

         ;; Indent by one level if the line ends with an open paren.
         ((looking-at "^.*\(\\s-*$")
          (setq cur-indent (+ (current-indentation) puppet-indent-level))
          (setq not-indented nil))

         ;; Semicolon ends a block for a resource when multiple resources
         ;; are defined in the same block, but try not to get the case of
         ;; a complete resource on a single line wrong.
         ((looking-at "^\\([^'\":\n]\\|\"[^\n\"]*\"\\|'[^\n']*'\\)*;\\s-*$")
          (setq cur-indent (- (current-indentation) puppet-indent-level))
          (setq not-indented nil))

         ;; Indent an extra level after : since it introduces a resource.
         ((looking-at "^.*:\\s-*$")
          (setq cur-indent (+ (current-indentation) puppet-indent-level))
          (setq not-indented nil))

         ;; Start of buffer.
         ((bobp)
          (setq not-indented nil)))))

    ;; If this line contains only a closing paren, we should lose one
    ;; level of indentation.
    (if (looking-at "^\\s-*\)\\s-*$")
        (setq cur-indent (- cur-indent puppet-indent-level)))))

      ;; We've figured out the indentation, so do it.
      (if (and cur-indent (> cur-indent 0))
      (indent-line-to cur-indent)
    (indent-line-to 0)))))

(defvar puppet-font-lock-syntax-table
  (let* ((tbl (copy-syntax-table puppet-mode-syntax-table)))
    (modify-syntax-entry ?_ "w" tbl)
    tbl))

(defvar puppet-font-lock-keywords
  (list
   ;; defines, classes, and nodes
   '("^\\s *\\(class\\|define\\|node\\)\\s +\\([^( \t\n]+\\)"
     2 font-lock-function-name-face)
   ;; inheritence
   '("\\s +inherits\\s +\\([^( \t\n]+\\)"
     1 font-lock-function-name-face)
   ;; include
   '("\\(^\\|\\s +\\)include\\s +\\(\\([a-zA-Z0-9:_-]+\\(,[ \t\n]*\\)?\\)+\\)"
     2 font-lock-reference-face)
   ;; keywords
   (cons (concat
      "\\b\\(\\("
      (mapconcat
       'identity
       '("alert"
         "case"
         "class"
         "crit"
         "debug"
         "default"
         "define"
         "defined"
         "else"
         "emerg"
         "err"
         "fail"
         "false"
         "file"
         "filebucket"
         "generate"
         "if"
         "import"
         "include"
         "info"
         "inherits"
         "node"
         "notice"
         "realize"
         "search"
         "tag"
         "tagged"
         "template"
         "true"
         "warning"
         )
       "\\|")
      "\\)\\>\\)")
     1)
     ;; variables
     '("\\(^\\|[^_:.@$]\\)\\b\\(true\\|false\\)\\>"
       2 font-lock-variable-name-face)
     '("\\$[a-zA-Z0-9_:]+"
       0 font-lock-variable-name-face)
     ;; usage of types
     '("^\\s *\\([a-z][a-zA-Z0-9_:-]*\\)\\s +{"
       1 font-lock-type-face)
     ;; overrides and type references
     '("\\s +\\([A-Z][a-zA-Z0-9_:-]*\\)\\["
       1 font-lock-type-face)
     ;; general delimited string
     '("\\(^\\|[[ \t\n<+(,=]\\)\\(%[xrqQwW]?\\([^<[{(a-zA-Z0-9 \n]\\)[^\n\\\\]*\\(\\\\.[^\n\\\\]*\\)*\\(\\3\\)\\)"
       (2 font-lock-string-face)))
  "*Additional expressions to highlight in puppet mode.")

;;;###autoload
(defun puppet-mode ()
  "Major mode for editing puppet manifests.

The variable puppet-indent-level controls the amount of indentation.
\\{puppet-mode-map}"
  (interactive)
  (kill-all-local-variables)
  (use-local-map puppet-mode-map)
  (setq mode-name "Puppet")
  (setq major-mode 'puppet-mode)
  (set-syntax-table puppet-mode-syntax-table)
  (set (make-local-variable 'local-abbrev-table) puppet-mode-abbrev-table)
  (set (make-local-variable 'comment-start) "# ")
  (set (make-local-variable 'comment-start-skip) "#+ *")
  (set (make-local-variable 'comment-use-syntax) t)
  (set (make-local-variable 'comment-end) "")
  (set (make-local-variable 'comment-auto-fill-only-comments) t)
  (set (make-local-variable 'comment-column) puppet-comment-column)
  (set (make-local-variable 'indent-line-function) 'puppet-indent-line)
  (set (make-local-variable 'indent-tabs-mode) puppet-indent-tabs-mode)
  (set (make-local-variable 'require-final-newline) t)
  (set (make-local-variable 'paragraph-ignore-fill-prefix) t)
  (set (make-local-variable 'paragraph-start) "\f\\|[   ]*$\\|#$")
  (set (make-local-variable 'paragraph-separate) "\\([  \f]*\\|#\\)$")
  (or (boundp 'font-lock-variable-name-face)
      (setq font-lock-variable-name-face font-lock-type-face))
  (set (make-local-variable 'font-lock-keywords) puppet-font-lock-keywords)
  (set (make-local-variable 'font-lock-multiline) t)
  (set (make-local-variable 'font-lock-defaults)
       '((puppet-font-lock-keywords) nil nil))
  (set (make-local-variable 'font-lock-syntax-table)
       puppet-font-lock-syntax-table)
  (run-hooks 'puppet-mode-hook))

(provide 'puppet-mode)

;;
;; Setup puppet-mode for autoloading
;;
(autoload 'puppet-mode "puppet-mode" "Major mode for editing puppet manifests")

(add-to-list 'auto-mode-alist '("\\.pp$" . puppet-mode))
#+END_SRC
* Company
** TODO evtl. company enter key verbessern
https://emacs.stackexchange.com/questions/13286/how-can-i-stop-the-enter-key-from-triggering-a-completion-in-company-mode

#+BEGIN_SRC emacs-lisp
  (use-package company
    :hook (prog-mode . company-mode)
    :diminish
    :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay .1)
    (company-minimum-prefix-length 1)
    (company-show-numbers t)
    (company-tooltip-align-annotations 't)
    (company-tooltip-limit 20)
    (company-echo-delay 0)
    (company-dabbrev-downcase nil)
    :config
    (use-package company-go
      :after company
      :diminish)

    (general-define-key
     :states '(insert motion)
     "C-n" 'company-select-next-or-abort
     "C-p" 'company-select-previous-or-abort))

  (add-hook 'go-mode-hook (lambda ()
                            (set (make-local-variable 'company-backends) '(company-go))
                            (company-mode)))
#+END_SRC
* Yasnippets
https://emacs.stackexchange.com/questions/29758/yasnippets-and-org-mode-yas-next-field-or-maybe-expand-does-not-expand
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :commands (yas-reload-all yas-minor-mode)
    :config
    (use-package yasnippet-snippets))

  (use-package ivy-yasnippet
    :config
    (general-define-key
     :states '(insert motion)
     "C-c y" 'ivy-yasnippet))

  (add-hook 'c++-mode-hook (lambda() (yas-reload-all)(yas-minor-mode)))
  (add-hook 'go-mode-hook (lambda() (yas-reload-all)(yas-minor-mode)))
  (add-hook 'rust-mode-hook (lambda() (yas-reload-all)(yas-minor-mode)))

  ;;(defun yas-org-very-safe-expand ()
  ;;  (let ((yas-fallback-behavior 'return-nil)) (yas-expand)))
  ;;
  ;;(add-hook 'org-mode-hook
  ;;      (lambda ()
  ;;        (add-to-list 'org-tab-first-hook 'yas-org-very-safe-expand)
  ;;        (define-key yas-keymap [tab] 'yas-next-field)))

  ;;(add-hook 'org-mode-hook (lambda() (yas-reload-all)(yas-minor-mode)))
#+END_SRC
** CANCELLED company/yasnippets                                                    :CANCELLED:
Look at this if needed.
#+BEGIN_SRC emacs-lisp
  ;; https://emacs.stackexchange.com/questions/10431/get-company-to-show-suggestions-for-yasnippet-names
  ;; Add yasnippet support for all company backends
  ;; https://github.com/syl20bnr/spacemacs/pull/179
  (defvar company-mode/enable-yas t
    "Enable yasnippet for all backends.")

  (defun company-mode/backend-with-yas (backend)
    (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
    backend
      (append (if (consp backend) backend (list backend))
          '(:with company-yasnippet))))

  (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :init
    (general-define-key
      :states '(normal visual insert emacs)
      :prefix "SPC"
      :non-normal-prefix "M-SPC"
      "g"  '(:ignore t :which-key "Magit")
      "gs" '(magit-status :which-key "Status")
      "gp" '(magit-push-other :which-key "Push")
      "gl" '(magit-log :which-key "Log"))
    :config
      (require 'evil-magit))

  (use-package evil-magit
    :after magit)
  (add-hook 'git-commit-mode-hook 'evil-insert-state)
#+END_SRC
* Engine
#+BEGIN_SRC emacs-lisp
  (use-package engine-mode
    :config
    (progn
      (defengine google "http://google.de/search?q=%s" :keybinding "g")
      (defengine mail "https://mail.google.com/mail/u/0/#search/%s" :keybinding "m")
      (defengine jira "https://jira.payone-office.de/issues/?jql=text ~ \"\"%s\"\" ORDER BY created DESC" :keybinding "j")
      (engine-mode))

    (general-define-key
      :states '(normal visual insert emacs)
      :prefix "SPC"
      :non-normal-prefix "M-SPC"
      "se"  '(:ignore t :which-key "Engine")
      "seg" '(engine/search-google "goole" :which-key "Google")
      "sem" '(engine/search-mail "mail" :which-key "Mail")
      "sej" '(engine/search-jira "jira" :which-key "Jira")))
#+END_SRC
* Tramp
https://rentes.github.io/emacs/windows/ssh/2016/08/25/Editing-Remote-Files-With-Emacs-Under-Windows/

#+BEGIN_EXAMPLE
  /plink:user@host:
  /plink:user@host|sudo:host:
#+END_EXAMPLE

With tramp-default-proxies-alist:
https://emacs.stackexchange.com/questions/26560/bookmarking-remote-directories-trampsudo
#+BEGIN_EXAMPLE
  /sudo:hugo.rivered.de:
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
  (use-package tramp
    :init
      (setq tramp-persistency-file-name nil)
    :config
      (when (my-system-is-mypc)
    (set-default 'tramp-auto-save-directory "C:\\Users\\NOBODY\\AppData\\Local\\Temp")
    (set-default 'tramp-default-method "plink"))
      (when (my-system-is-myworkpc)
    (set-default 'tramp-auto-save-directory "C:\\Users\\chris.keschnat\\AppData\\Local\\Temp")
    (set-default 'tramp-default-method "plink"))
      (add-to-list 'tramp-default-proxies-alist
           '("\\`hugo.rivered.de\\'" "\\`root\\'" "/plink:ck@%h:"))
      (add-to-list 'tramp-default-proxies-alist
           '("\\`moon.rivered.de\\'" "\\`root\\'" "/plink:ck@%h:"))

      (use-package counsel-tramp)

      (add-hook 'counsel-tramp-pre-command-hook '(lambda ()
                       (projectile-mode 0)))
      (add-hook 'counsel-tramp-quit-hook '(lambda ()
                    (projectile-mode 1)))

      (eval-after-load 'tramp '(setenv "SHELL" "/bin/bash"))

      (setq counsel-tramp-custom-connections '(/plink:hugo.rivered.de|sudo:ck@hugo.rivered.de:/ /plink:moon.rivered.de|sudo:ck@moon.rivered.de:/)))

#+END_SRC
* CANCELLED Elfeed                                                :CANCELLED:
CLOSED: [2018-12-09 Sun 00:26]
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :config
    (add-to-list 'evil-emacs-state-modes 'elfeed-search-mode)
    (add-to-list 'evil-emacs-state-modes 'elfeed-show-mode)

    (setq elfeed-feeds
      '("http://nullprogram.com/feed/"
        "http://planet.emacsen.org/atom.xml"
        "https://hnrss.org/frontpage"))

    (use-package elfeed-goodies
      :config
    (require 'elfeed-goodies)
    (elfeed-goodies/setup)))
#+END_SRC
* caldav
https://www.reddit.com/r/orgmode/comments/8rl8ep/making_orgcaldav_useable/
#+BEGIN_SRC emacs-lisp
  (use-package org-caldav
    :init
    (setq org-caldav-files nil)
    :config
    (setq org-caldav-url "https://radicale.rivered.de:5232/ckeschnat")
    (setq org-caldav-calendar-id "e03543b6-1a19-95fa-799a-01bb289a4b2b")
    (setq org-caldav-inbox "C:/docs/org/calendar/calendar.org")
    (setq org-icalendar-timezone "Europe/Berlin")
    ;; This ensures all org "deadlines" show up, and show up as due dates
    (setq org-icalendar-use-deadline '(event-if-todo event-if-not-todo todo-due))
    ;; This ensures "scheduled" org items show up, and show up as start times
    (setq org-icalendar-use-scheduled '(todo-start event-if-todo event-if-not-todo)))
#+END_SRC
* calfw
#+BEGIN_SRC emacs-lisp
  (use-package calfw
    :commands (cfw:open-calendar-buffer))

  (use-package calfw-org
    :commands (cfw:open-org-calendar)
    :config
    (setq calendar-week-start-day 1))
#+END_SRC
* ox-hugo
#+BEGIN_SRC emacs-lisp
  (use-package ox-hugo
    :after ox
    :defer 1)
#+END_SRC
* flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :init (global-flycheck-mode)
    :config
    (use-package flycheck-inline))
#+END_SRC
* ledger
#+BEGIN_SRC emacs-lisp
  (use-package ledger-mode
    :mode ("\\.dat\\'"
           "\\.ledger\\'")
    :config
    (require 'flycheck-ledger)
    (setq ledger-default-date-format "%Y-%m-%d")
    (setq ledger-post-auto-adjust-amounts t)
    (setq ledger-post-amount-alignment-column 85)
    (defun my-ledger-mode-before-save-hook ()
    (when (eq major-mode 'ledger-mode)
      (ledger-mode-clean-buffer)))
    (add-hook 'before-save-hook 'my-ledger-mode-before-save-hook)
    (define-advice org-edit-src-exit (:before (&rest _args) format-ledger)
      "Run `ledger-mode-clean-buffer' on ledger."
      (when (eq major-mode 'ledger-mode)
        (message "Formatting ledger...")
        (ledger-mode-clean-buffer)))
    :custom
    (ledger-clear-whole-transactions t))

  (require 'ob-ledger)

  (use-package flycheck-ledger
    :after (flycheck ledger-mode))
#+END_SRC
* Rust

https://www.reddit.com/r/rust/comments/a3da5g/my_entire_emacs_config_for_rust_in_fewer_than_20/

#+begin_src emacs-lisp
  ;; (use-package lsp-mode
  ;;   :commands lsp
  ;;   :init
  ;;   (setq lsp-enable-snippet nil)
  ;;   :config
  ;;   (require 'lsp-clients))

  ;; (use-package lsp-ui)

  (use-package toml-mode)

  ;; (use-package rust-mode
    ;; :hook (rust-mode . lsp))
  (use-package rust-mode
    :config
    (use-package flycheck-rust
      :config (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)))

  ;; Add keybindings for interacting with Cargo
  (use-package cargo
    :hook (rust-mode . cargo-minor-mode))

  ;; no idea how to make this work correctly with use-package. the hook adding above does not work
  (with-eval-after-load 'rust-mode
    (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))

  (with-eval-after-load 'flycheck
    (add-hook 'flycheck-mode-hook #'flycheck-inline-mode))
#+end_src
    :after rust-mode
* org-static-blog

#+begin_src emacs-lisp
  (use-package org-static-blog
    :config
    (setq org-static-blog-publish-title "Cats everywhere!")
    (setq org-static-blog-publish-url "https://blog.catsu.it/")
    (setq org-static-blog-publish-directory (concat my-org-dir "blog/blog/"))
    (setq org-static-blog-posts-directory (concat my-org-dir "blog/posts/"))
    (setq org-static-blog-drafts-directory (concat my-org-dir "blog/drafts/"))
    (setq org-static-blog-enable-tags t)
    (setq org-export-with-toc nil)
    (setq org-export-with-section-numbers nil)

    ;; This header is inserted into the <head> section of every page:
    ;;   (you will need to create the style sheet at
    ;;    ~/projects/blog/static/style.css
    ;;    and the favicon at
    ;;    ~/projects/blog/static/favicon.ico)
    (setq org-static-blog-page-header
    "<meta name=\"author\" content=\"Chris Keschnat\">
    <meta name=\"referrer\" content=\"no-referrer\">
    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">
    <link href=\"static/style2.css\" rel=\"stylesheet\" type=\"text/css\" />
    <link rel=\"icon\" href=\"static/favicon.ico\">")

    ;; This preamble is inserted at the beginning of the <body> of every page:
    ;;   This particular HTML creates a <div> with a simple linked headline
   (setq org-static-blog-page-preamble
   "<header><nav id=\"navigation\">
     <div>
       <div>
         <ul>
           <li><a href=\"https://blog.catsu.it\">Cats everywhere!</a></li>
           <li><a href=\"https://blog.catsu.it/tags.html\">Tags</a></li>
           <li><a href=\"https://blog.catsu.it/archive.html\">Archive</a></li>
           <li><a href=\"https://blog.catsu.it/rss.xml\">RSS</a></li>
           <li><a href=\"https://blog.catsu.it/impress.html\">Impressum</a></li>
         </ul>
       </div>
     </div>
   </nav></header>")

    ;; This postamble is inserted at the end of the <body> of every page:
    ;;   This particular HTML creates a <div> with a link to the archive page
    ;;   and a licensing stub.
    (setq org-static-blog-page-postamble
    "<div id=\"archive\">
      <a href=\"https://blog.catsu.it/archive.html\">Other posts</a>
    </div>
    "
    ))
#+end_src

#+RESULTS:
: t
