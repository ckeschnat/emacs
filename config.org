#+SETUPFILE: themes/theme-readtheorg-local.setup
#+OPTIONS: html-postamble:nil num:nil
#+FILETAGS: emacs
#+TITLE: Emacs config

* Packages and use-package
#+BEGIN_SRC emacs-lisp
;; Package configs
(require 'package)
(setq package-enable-at-startup nil)
(setq package-archives '(("org"   . "http://orgmode.org/elpa/")
                         ("gnu"   . "http://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))
(package-initialize)

;; Bootstrap `use-package`
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)
#+END_SRC

* UI
https://huytd.github.io/emacs-from-scratch.html

#+BEGIN_SRC emacs-lisp
;; Minimal UI
(scroll-bar-mode -1)
(tool-bar-mode   -1)
(tooltip-mode    -1)
(menu-bar-mode   -1)
(setq inhibit-splash-screen t)
#+END_SRC

*** Font
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(font . "Liberation Mono"))
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
(add-to-list 'default-frame-alist '(fullscreen . fullheight))
#+END_SRC

*** Theme
#+BEGIN_SRC emacs-lisp
;; Theme
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
  (setq zenburn-override-colors-alist '(
                                        ("zenburn-bg-05" . "#131818")
                                        ("zenburn-bg-1" . "#6A714A")
                                        ))
(load-theme 'zenburn t)

;;(use-package doom-themes
;;  :ensure t
;;  :config
;;  (load-theme 'doom-one t))
#+END_SRC
* Misc
*** Paths
#+BEGIN_SRC emacs-lisp
  (setenv "PATH" (concat "C:\\msys64\\usr\\bin;" "C:\\msys64\\mingw64\\bin;" "C:\\texlive\\2018\\bin\\win32;" "w:\\handmade\\misc;" (getenv "PATH")))
#+END_SRC
*** Encoding
See [[https://www.masteringemacs.org/article/working-coding-systems-unicode-emacs][masteringemacs]]
#+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  ;; backwards compatibility as default-buffer-file-coding-system
  ;; is deprecated in 23.2.
  (if (boundp 'buffer-file-coding-system)
      (setq-default buffer-file-coding-system 'utf-8)
    (setq default-buffer-file-coding-system 'utf-8))

  ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))

#+END_SRC
*** Parens
#+BEGIN_SRC emacs-lisp
  ;; Show matching parens
  (setq show-paren-delay 0)
  (show-paren-mode 1)
#+END_SRC
*** Backup and lock files
#+BEGIN_SRC emacs-lisp
  ;; Disable backup files
  (setq make-backup-files nil) ; stop creating backup~ files
  (setq auto-save-default nil) ; stop creating #autosave# files

  ;; No lock files
  (setq create-lockfiles nil)
#+END_SRC
*** persistent undo
#+BEGIN_SRC emacs-lisp
  (setq undo-tree-auto-save-history t)
  (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
#+END_SRC
*** center after search
#+BEGIN_SRC emacs-lisp
  ;; center after search
  (setq scroll-conservatively 0)
#+END_SRC
*** filetypes to modes
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.asciidoc\\'" . adoc-mode))
  (add-to-list 'auto-mode-alist '("\\.txt\\'" . org-mode))
#+END_SRC
* Evil
[[https://github.com/emacs-evil/evil-collection][Evil-Collection]]

[[https://github.com/Somelauw/evil-org-mode][evil-org]]

#+BEGIN_SRC emacs-lisp
  ;; Vim mode
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))

  (use-package evil-escape
    :ensure t
    :init
    (setq-default evil-escape-key-sequence "fd")
    :config
    (evil-escape-mode 1))

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))

  (use-package evil-org
    :ensure t
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda ()
                (evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))

  (defun my-center-line (&rest _)
    (evil-scroll-line-to-center nil))

  (advice-add 'evil-search-next :after #'my-center-line)
#+END_SRC
*** Lispyville
https://github.com/noctuid/lispyville

Just because of

#+BEGIN_QUOTE
If you are just looking for a way to prevent evil’s
operators from unbalancing parentheses, you can enable lispyville-mode
in your configuration and just ignore the rest of its features.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  (use-package lispyville
   :ensure t)

  (add-hook 'emacs-lisp-mode-hook #'lispyville-mode)
  (add-hook 'lisp-mode-hook #'lispyville-mode)
#+END_SRC
* General
Key bindings.
**** TODO move some of these somewhere else
#+BEGIN_SRC emacs-lisp
  ;; Custom keybinding
  (use-package general
    :ensure t
    :config
    (general-evil-setup t)

    (general-define-key
      :prefix "C-c"
      ;; bind "C-c a" to 'org-agenda
      "a" 'org-agenda
      "b" 'counsel-bookmark
      "c" 'org-capture)

    (general-define-key
      :states '(normal visual insert emacs)
      :prefix "SPC"
      :non-normal-prefix "M-SPC"
      "TAB" '(spacemacs/alternate-buffer :which-key "previous buffer")
      ;; Window
      "w"  '(:ignore t :which-key "Windows")
      "wl"  '(windmove-right :which-key "move right")
      "wh"  '(windmove-left :which-key "move left")
      "wk"  '(windmove-up :which-key "move up")
      "wj"  '(windmove-down :which-key "move bottom")
      "w/"  '(split-window-right :which-key "split right")
      "w-"  '(split-window-below :which-key "split bottom")
      "wd"  '(delete-window :which-key "delete window")
      ;; Files
      "f"  '(:ignore t :which-key "Files")
      ;; Buffers
      "b"  '(:ignore t :which-key "Buffers")
      "bd"  '(kill-this-buffer :which-key "delete buffer")
      ;; Search
      "s"  '(:ignore t :which-key "Search")
      ;; Others
      "o"  '(:ignore t :which-key "Other")))
#+END_SRC

* Ivy
#+BEGIN_SRC emacs-lisp
(use-package ivy :ensure t
  :diminish (ivy-mode . "") ; does not display ivy in the modeline
  :init (ivy-mode 1)        ; enable ivy globally at startup
  ;:bind (:map ivy-mode-map  ; bind in the ivy buffer
  ;       ("C-'" . ivy-avy)) ; C-' to ivy-avy
  :config
  (setq ivy-use-virtual-buffers t)   ; extend searching to bookmarks and ¡­
  (setq ivy-height 20)               ; set height of the ivy window
  (setq ivy-count-format "(%d/%d) ") ; count format, from the ivy help page
  )

(general-define-key
  :states '(normal visual insert emacs)
  :prefix "SPC"
  :non-normal-prefix "M-SPC"
  "SPC" '(counsel-M-x :which-key "M-x")
  ;; Buffers
  "bb"  '(ivy-switch-buffer :which-key "buffers list")
  ;; Files
  "ff"  '(counsel-find-file :which-key "find files")
  "fr"  '(counsel-recentf :which-key "recent files")
  ;; Search
  "ss"   '(swiper :which-key "swiper")
  ;; "/"   '(counsel-rg :which-key "ripgrep") ; You'll need counsel package for this
)

(general-define-key
  :states '(normal visual insert emacs)
  "C-s" 'swiper
  "M-x" 'counsel-M-x)

; fuzzy matching except with swiper
(setq ivy-re-builders-alist
      '((swiper . ivy--regex-plus)
        (t      . ivy--regex-fuzzy)))

;(use-package avy :ensure t)
(use-package counsel :ensure t
;  :bind*                           ; load counsel when pressed
;  (("M-x"     . counsel-M-x)       ; M-x use counsel
;   ("C-x C-f" . counsel-find-file) ; C-x C-f use counsel-find-file
;   ("C-x C-r" . counsel-recentf)   ; search recently edited files
;   ("C-c f"   . counsel-git)       ; search for files in git repo
;   ("C-c s"   . counsel-git-grep)  ; search for regexp in git repo
;   ("C-c /"   . counsel-ag)        ; search for regexp in git repo using ag
;   ("C-c l"   . counsel-locate))   ; search for files or else using locate
  )
#+END_SRC
* Which-key
#+BEGIN_SRC emacs-lisp
;; Which Key
(use-package which-key
  :ensure t
  :init
  (setq which-key-separator " ")
  (setq which-key-prefix-prefix "+")
  :config
  (which-key-mode 1))
#+END_SRC
* Ranger
#+BEGIN_SRC emacs-lisp
  (use-package ranger
  :ensure t
  :config

    (general-define-key
      :states '(normal visual insert emacs)
      :prefix "SPC"
      :non-normal-prefix "M-SPC"
      "or" '(ranger :which-key "Ranger")
    )
  )
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
;; Projectile
(use-package projectile
  :ensure t
  :init
  (setq projectile-require-project-root nil)
  :config
  (projectile-mode 1))
#+END_SRC
* ripgrep
#+BEGIN_SRC emacs-lisp
  (use-package rg
    :ensure t
    :config

    (general-define-key
      :states '(normal visual insert emacs)
      :prefix "SPC"
      :non-normal-prefix "M-SPC"
      "sr" '(rg :which-key "ripgrep")))
#+END_SRC
* Org
*** use-package
#+BEGIN_SRC emacs-lisp
(use-package org
    :config
#+END_SRC
*** TODO keybindings
Why does TAB not work?

#+BEGIN_SRC emacs-lisp
 (general-def 'motion
   "RET" 'org-open-at-point
   "t" 'org-todo
   "TAB" 'org-cycle)
#+END_SRC
*** Background colors for export
#+BEGIN_SRC emacs-lisp
;; background colors for export http://ivanmalison.github.io/dotfiles/#setbackgroundcolorofsourceblocksforexport
    (progn
    (defun imalison:org-inline-css-hook (exporter)
        "Insert custom inline css to automatically set the
        background of code to whatever theme I'm using's background"
        (when (eq exporter 'html)
        (let* ((my-pre-bg (face-background 'default))
                (my-pre-fg (face-foreground 'default)))
            (setq
            org-html-head-extra
            (concat
            org-html-head-extra
            (format "<style type=\"text/css\">\n pre.src {background-color: %s; color: %s;}</style>\n"
                    my-pre-bg my-pre-fg))))))

    (add-hook 'org-export-before-processing-hook 'imalison:org-inline-css-hook))
#+END_SRC

*** Bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
  :ensure t
  :config
    (setq org-bullets-bullet-list '("■" "◆" "▲" "▶"))
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
*** org-super-agenda
#+BEGIN_SRC emacs-lisp
;; (use-package org-super-agenda
;;   :config (org-super-agenda-mode))

;; (setq org-agenda-custom-commands
;;       '(("c" "Super Agenda" agenda
;;          (org-super-agenda-mode)
;;          ((org-super-agenda-groups
;;            '(
;;              (:name "Next Items"
;;                     :time-grid t
;;                     :tag ("NEXT" "outbox"))
;;              (:name "Important"
;;                     :priority "A")
;;              (:name "Today"
;;                     :time-grid t
;;                     :scheduled today)
;;              (:name "Quick Picks"
;;                     :effort < 00:30 ; ← that one doesn't seem to work, no?
;;                     )
;;              (:priority<= "B"
;;                           :order 1)
;;              )))
;;          (org-agenda nil "a"))))
;; (let ((org-super-agenda-groups
;;        '(;; Each group has an implicit boolean OR operator between its selectors.
;;          (:name "Today"  ; Optionally specify section name
;;                 :time-grid t  ; Items that appear on the time grid
;;                 :todo "TODAY")  ; Items that have this TODO keyword
;;          (:name "Important"
;;                 ;; Single arguments given alone
;;                 :tag "bills"
;;                 :priority "A")
;;          ;; Set order of multiple groups at once
;;          (:order-multi (2 (:name "Shopping in town"
;;                                  ;; Boolean AND group matches items that match all subgroups
;;                                  :and (:tag "shopping" :tag "@town"))
;;                           (:name "Food-related"
;;                                  ;; Multiple args given in list with implicit OR
;;                                  :tag ("food" "dinner"))
;;                           (:name "Personal"
;;                                  :habit t
;;                                  :tag "personal")
;;                           (:name "Space-related (non-moon-or-planet-related)"
;;                                  ;; Regexps match case-insensitively on the entire entry
;;                                  :and (:regexp ("space" "NASA")
;;                                                ;; Boolean NOT also has implicit OR between selectors
;;                                                :not (:regexp "moon" :tag "planet")))))
;;          ;; Groups supply their own section names when none are given
;;          (:todo "WAITING" :order 8)  ; Set order of this section
;;          (:todo ("SOMEDAY" "TO-READ" "CHECK" "TO-WATCH" "WATCHING")
;;                 ;; Show this group at the end of the agenda (since it has the
;;                 ;; highest number). If you specified this group last, items
;;                 ;; with these todo keywords that e.g. have priority A would be
;;                 ;; displayed in that group instead, because items are grouped
;;                 ;; out in the order the groups are listed.
;;                 :order 9)
;;          (:priority<= "B"
;;                       ;; Show this section after "Today" and "Important", because
;;                       ;; their order is unspecified, defaulting to 0. Sections
;;                       ;; are displayed lowest-number-first.
;;                       :order 1)
;;          ;; After the last group, the agenda will display items that didn't
;;          ;; match any of these groups, with the default order position of 99
;;          )))
;;   (org-agenda nil "a"))
#+END_SRC
*** org-archive-subtree-hierachical
#+BEGIN_SRC emacs-lisp
;; org-archive-subtree-hierarchical.el
;; modified from https://lists.gnu.org/archive/html/emacs-orgmode/2014-08/msg00109.html

;; In orgmode
;; * A
;; ** AA
;; *** AAA
;; ** AB
;; *** ABA
;; Archiving AA will remove the subtree from the original file and create
;; it like that in archive target:

;; * AA
;; ** AAA

;; And this give you
;; * A
;; ** AA
;; *** AAA


(require 'org-archive)

(defun org-archive-subtree-hierarchical--line-content-as-string ()
    "Returns the content of the current line as a string"
    (save-excursion
    (beginning-of-line)
    (buffer-substring-no-properties
    (line-beginning-position) (line-end-position))))

(defun org-archive-subtree-hierarchical--org-child-list ()
    "This function returns all children of a heading as a list. "
    (interactive)
    (save-excursion
    ;; this only works with org-version > 8.0, since in previous
    ;; org-mode versions the function (org-outline-level) returns
    ;; gargabe when the point is not on a heading.
    (if (= (org-outline-level) 0)
        (outline-next-visible-heading 1)
        (org-goto-first-child))
    (let ((child-list (list (org-archive-subtree-hierarchical--line-content-as-string))))
        (while (org-goto-sibling)
        (setq child-list (cons (org-archive-subtree-hierarchical--line-content-as-string) child-list)))
        child-list)))

(defun org-archive-subtree-hierarchical--org-struct-subtree ()
    "This function returns the tree structure in which a subtree
belongs as a list."
    (interactive)
    (let ((archive-tree nil))
    (save-excursion
        (while (org-up-heading-safe)
        (let ((heading
                (buffer-substring-no-properties
                (line-beginning-position) (line-end-position))))
            (if (eq archive-tree nil)
                (setq archive-tree (list heading))
            (setq archive-tree (cons heading archive-tree))))))
    archive-tree))

(defun org-archive-subtree-hierarchical ()
    "This function archives a subtree hierarchical"
    (interactive)
    (let ((org-tree (org-archive-subtree-hierarchical--org-struct-subtree))
        (this-buffer (current-buffer))
        (file (abbreviate-file-name
                (or (buffer-file-name (buffer-base-buffer))
                    (error "No file associated to buffer")))))
    (save-excursion
        (setq location (org-get-local-archive-location)
            afile (org-extract-archive-file location)
            heading (org-extract-archive-heading location)
            infile-p (equal file (abbreviate-file-name (or afile ""))))
        (unless afile
        (error "Invalid `org-archive-location'"))
        (if (> (length afile) 0)
            (setq newfile-p (not (file-exists-p afile))
                visiting (find-buffer-visiting afile)
                buffer (or visiting (find-file-noselect afile)))
        (setq buffer (current-buffer)))
        (unless buffer
        (error "Cannot access file \"%s\"" afile))
        (org-cut-subtree)
        (set-buffer buffer)
        (org-mode)
        (goto-char (point-min))
        (while (not (equal org-tree nil))
        (let ((child-list (org-archive-subtree-hierarchical--org-child-list)))
            (if (member (car org-tree) child-list)
                (progn
                (search-forward (car org-tree) nil t)
                (setq org-tree (cdr org-tree)))
            (progn
                (goto-char (point-max))
                (newline)
                (org-insert-struct org-tree)
                (setq org-tree nil)))))
        (newline)
        (org-yank)
        (when (not (eq this-buffer buffer))
        (save-buffer))
        (message "Subtree archived %s"
                (concat "in file: " (abbreviate-file-name afile))))))

(defun org-insert-struct (struct)
    "TODO"
    (interactive)
    (when struct
    (insert (car struct))
    (newline)
    (org-insert-struct (cdr struct))))

(defun org-archive-subtree ()
    (org-archive-subtree-hierarchical)
    )
#+END_SRC
*** Archive location
#+BEGIN_SRC emacs-lisp
(setq org-archive-location "archive/%s_archive::")
#+END_SRC
*** Hide markers
#+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers t)
#+END_SRC
*** Fold everything when opening
#+BEGIN_SRC emacs-lisp
(setq org-startup-indented t)
#+END_SRC
*** No superscripts
#+BEGIN_SRC emacs-lisp
(setq org-export-with-sub-superscripts nil)
#+END_SRC
*** src-blocks
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
(setq org-src-tab-acts-natively t)
#+END_SRC
*** Agenda
#+BEGIN_SRC emacs-lisp
(setq home-org-dir "c:/Users/NOBODY/Documents/Seafile/docs/org/")
(setq work-org-dir "c:/Users/chris.keschnat/Documents/docs/org/")
(setq org-agenda-files
        (cond ((file-directory-p home-org-dir) (list home-org-dir))
            ((file-directory-p work-org-dir) (list work-org-dir))
        )
)

(setq org-agenda-text-search-extra-files '(agenda-archives))
#+END_SRC
*** Not yet sorted
#+BEGIN_SRC emacs-lisp
  ;; TODO(chris) use this?
  ;; (setq org-publish-project-alist
  ;;       '(("org"
  ;;          :base-directory "c:/Users/NOBODY/Documents/Seafile/docs/org/"
  ;;          :publishing-directory "c:/Users/NOBODY/Documents/Seafile/docs/org/html/"
  ;;          :publishing-function org-html-publish-to-html
  ;;          :section-numbers nil
  ;;          :table-of-contents nil)))

  (setq org-blank-before-new-entry '((heading . nil) (plain-list-item . auto)))

  (setq org-enforce-todo-dependencies t)
  (setq org-enforce-todo-checkbox-dependencies t)

  (setq org-log-redeadline (quote time))
  (setq org-log-reschedule (quote time))

  (setq org-default-notes-file (concat (car org-agenda-files) "inbox.org"))
  ;; More headings for refile
  ;; (setq org-refile-targets '((org-agenda-files . (:maxlevel . 6))))
  (setq org-refile-targets '((nil :maxlevel . 9)
                              (org-agenda-files :maxlevel . 9)))
  (setq org-refile-use-outline-path 'file)              ; Show full paths for refiling
  (setq org-outline-path-complete-in-steps nil)         ; Refile in a single go

  (setq helm-org-rifle-show-path t)
  (setq org-refile-allow-creating-parent-nodes 'confirm)

  (setq org-todo-keyword-faces
          '(("TODO" . org-warning)
          ("NEXT" . org-todo)
          ("SOMEDAY" . (:foreground "moccasin" :weight bold))
          ("WAITING" . (:foreground "lavender blush" :weight bold))
          ("CANCELLED" . org-done)))

  (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "WAITING(w)" "SOMEDAY(s)" "|" "CANCELLED(c)" "DONE(d)")))
  (setq org-tag-alist (quote (
                              ("@home" . ?H)
                              ("@work" . ?W)
                              ("WAITING" . ?A)
                              ("PERSONAL" . ?P)
                              ("NOTE" . ?n)
                              ("CANCELLED" . ?C)
                              ("FLAGGED" . ??)
                              ("watch" . ?w)
                              ("read" . ?r)
                              )))

  (setq org-capture-templates
          (quote (("t" "todo" entry (file "") "* TODO %?\n%U\n%a\n")
                  ("n" "note" entry (file "") "* %? :NOTE:\n%U\n%a\n")
                  )))

  (add-to-list 'org-structure-template-alist
                  (list "hh" (concat "#+SETUPFILE: themes/theme-readtheorg-local.setup\n"
                                  "#+OPTIONS: html-postamble:nil num:nil\n"
                                  "#+FILETAGS: ?\n")))

  (add-to-list 'org-structure-template-alist
                  (list "p" (concat ":PROPERTIES:\n"
                                  "?\n"
                                  ":END:")))

  (add-to-list 'org-structure-template-alist
                  (list "eh" (concat ":EXPORT_FILE_NAME: ?\n"
                                  ":EXPORT_TITLE:\n"
                                  ":EXPORT_OPTIONS: html-postamble:nil num:nil")))


  (setq org-use-fast-todo-selection t)
  (setq org-todo-state-tags-triggers
          (quote (("CANCELLED" ("CANCELLED" . t))
                  ("WAITING" ("WAITING" . t))
                  (done ("WAITING"))
                  ("TODO" ("WAITING") ("CANCELLED"))
                  ("NEXT" ("WAITING") ("CANCELLED"))
                  ("DONE" ("WAITING") ("CANCELLED")))))


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html
  ;; maybe use https://github.com/alphapapa/org-super-agenda

  (defun air-org-skip-subtree-if-priority (priority)
      "Skip an agenda subtree if it has a priority of PRIORITY.

      PRIORITY may be one of the characters ?A, ?B, or ?C."
      (let ((subtree-end (save-excursion (org-end-of-subtree t)))
          (pri-value (* 1000 (- org-lowest-priority priority)))
          (pri-current (org-get-priority (thing-at-point 'line t))))
      (if (= pri-value pri-current)
          subtree-end
          nil)))

  ;; (setq org-agenda-custom-commands
  ;;       '(("c" "Simple agenda view"
  ;;          ((tags "PRIORITY=\"A\""
  ;;                 ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
  ;;                  (org-agenda-overriding-header "High-priority unfinished tasks:")))
  ;;           (agenda "")
  ;;           (alltodo ""
  ;;                    ((org-agenda-skip-function
  ;;                      '(or (air-org-skip-subtree-if-priority ?A)
  ;;                           (org-agenda-skip-if nil '(scheduled deadline))))))))))

  (setq org-agenda-custom-commands
          '(("d" "Daily agenda and all TODOs"
              ((tags "PRIORITY=\"A\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                      (org-agenda-overriding-header "High-priority unfinished tasks:")))
              (agenda "" ((org-agenda-span 'day)))
              (alltodo ""
                      ((org-agenda-skip-function '(or (air-org-skip-subtree-if-priority ?A)
                                                      (org-agenda-skip-if nil '(scheduled deadline))))
                      (org-agenda-overriding-header "ALL normal priority tasks:"))))
              ((org-agenda-compact-blocks t)))))


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; (setq org-agenda-custom-commands
  ;;       (quote (("N" "Notes" tags "NOTE"
  ;;                (
  ;;                 (org-agenda-overriding-header "Notes")
  ;;                 (org-tags-match-list-sublevels t)
  ;;                 )
  ;;                )
  ;;              )
  ;;       )
  ;; )

  (when (display-graphic-p)
    (let* ((variable-tuple (cond ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
                                 ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
                                 ((x-list-fonts "Verdana")         '(:font "Verdana"))
                                 ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
                                 (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
           (base-font-color     (face-foreground 'default nil 'default))
           (headline           `(:inherit default :weight bold :foreground ,base-font-color)))

      (custom-theme-set-faces 'user
                              `(org-level-8 ((t (,@headline ,@variable-tuple))))
                              `(org-level-7 ((t (,@headline ,@variable-tuple))))
                              `(org-level-6 ((t (,@headline ,@variable-tuple))))
                              `(org-level-5 ((t (,@headline ,@variable-tuple))))
                              `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
                              `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
                              `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5))))
                              `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75))))
                              `(org-document-title ((t (,@headline ,@variable-tuple :height 1.5 :underline nil)))))))

  ;; circles instead of dashes in lists
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                              (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
  ) ;; END use-package org
#+END_SRC
*** htmlize
To export to html.

#+BEGIN_SRC emacs-lisp
(use-package htmlize
  :ensure t)
#+END_SRC

* Navigation
*** Alternate buffer
#+BEGIN_SRC emacs-lisp
(defun spacemacs/alternate-buffer (&optional window)
  "Switch back and forth between current and last buffer in the
current window."
  (interactive)
  (let ((current-buffer (window-buffer window))
        (buffer-predicate
         (frame-parameter (window-frame window) 'buffer-predicate)))
    ;; switch to first buffer previously shown in this window that matches
    ;; frame-parameter `buffer-predicate'
    (switch-to-buffer
     (or (cl-find-if (lambda (buffer)
                       (and (not (eq buffer current-buffer))
                            (or (null buffer-predicate)
                                (funcall buffer-predicate buffer))))
                     (mapcar #'car (window-prev-buffers window)))
         ;; `other-buffer' honors `buffer-predicate' so no need to filter
         (other-buffer current-buffer t)))))
#+END_SRC
*** Movement
#+BEGIN_SRC emacs-lisp
  (general-define-key
    :states '(normal visual insert emacs)
    "C-j" 'forward-paragraph
    "C-k" 'backward-paragraph)

  ;; TODO(chris): make this work (works with eval-region)
  ;; (evil-define-key 'evilified org-agenda-mode-map (kbd "j") 'org-agenda-next-item)
  ;; (evil-define-key 'evilified org-agenda-mode-map (kbd "k") 'org-agenda-previous-item)
#+END_SRC
* Gc
#+BEGIN_SRC emacs-lisp
  ;; gc / make org faster
  ;; https://www.reddit.com/r/emacs/comments/55ork0/is_emacs_251_noticeably_slower_than_245_on_windows/d8cmm7v/
  (setq gc-cons-threshold (* 511 1024 1024))
  (setq gc-cons-percentage 0.5)
  (run-with-idle-timer 5 t #'garbage-collect)
  (setq garbage-collection-messages t)
#+END_SRC
* Helm                                                             :noexport:
#+BEGIN_SRC emacs-lisp :tangle no
;; Helm
(use-package helm
  :ensure t
  :init
  (setq helm-M-x-fuzzy-match t
  helm-mode-fuzzy-match t
  helm-buffers-fuzzy-matching t
  helm-recentf-fuzzy-match t
  helm-locate-fuzzy-match t
  helm-semantic-fuzzy-match t
  helm-imenu-fuzzy-match t
  helm-completion-in-region-fuzzy-match t
  helm-candidate-number-list 150
  helm-split-window-in-side-p t
  helm-move-to-line-cycle-in-source t
  helm-echo-input-in-header-line t
  helm-autoresize-max-height 0
  helm-autoresize-min-height 20)
  :config
  (helm-mode 1))

(global-set-key (kbd "M-x") #'helm-M-x)

(general-define-key
  :states '(normal visual insert emacs)
  :prefix "SPC"
  :non-normal-prefix "M-SPC"
  "SPC" '(helm-M-x :which-key "M-x")
  ;; Buffers
  "bb"  '(helm-buffers-list :which-key "buffers list")
  ;; Files
  "ff"  '(helm-find-files :which-key "find files")
  ;; "/"   '(counsel-rg :which-key "ripgrep") ; You'll need counsel package for this
)
#+END_SRC

* Custom
Do not edit below here.

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages (quote (use-package))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
#+END_SRC
